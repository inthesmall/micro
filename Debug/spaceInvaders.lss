
AVRASM ver. 2.2.6  \\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm Tue Feb 20 16:44:14 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m128def.inc'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(1): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\setup.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(2): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.inc'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.inc(89): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\char.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(474): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\delayRoutines.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(475): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\buttons.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(476): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.asm(1): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.inc'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(477): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m128def.inc'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(1): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\setup.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(2): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.inc'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.inc(89): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\char.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(474): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\delayRoutines.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(475): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\buttons.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(476): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.asm(1): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.inc'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(477): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm'
                                 
                                 .INCLUDE "setup.asm"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #define _M128DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega128
                                 #pragma AVRPART ADMIN PART_NAME ATmega128
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x97
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UCSR1C	= 0x9d	; MEMORY MAPPED
                                 .equ	UDR1	= 0x9c	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0x9b	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0x9a	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0x98	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0x99	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0x95	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0x90	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x8c	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x8b	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x8a	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x88	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x89	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x86	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x87	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x84	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x85	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x82	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x83	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x80	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x81	; MEMORY MAPPED
                                 .equ	ETIMSK	= 0x7d	; MEMORY MAPPED
                                 .equ	ETIFR	= 0x7c	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x7a	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x78	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x79	; MEMORY MAPPED
                                 .equ	TWCR	= 0x74	; MEMORY MAPPED
                                 .equ	TWDR	= 0x73	; MEMORY MAPPED
                                 .equ	TWAR	= 0x72	; MEMORY MAPPED
                                 .equ	TWSR	= 0x71	; MEMORY MAPPED
                                 .equ	TWBR	= 0x70	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x6f	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x6d	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x6c	; MEMORY MAPPED
                                 .equ	EICRA	= 0x6a	; MEMORY MAPPED
                                 .equ	SPMCSR	= 0x68	; MEMORY MAPPED
                                 .equ	PORTG	= 0x65	; MEMORY MAPPED
                                 .equ	DDRG	= 0x64	; MEMORY MAPPED
                                 .equ	PING	= 0x63	; MEMORY MAPPED
                                 .equ	PORTF	= 0x62	; MEMORY MAPPED
                                 .equ	DDRF	= 0x61	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	XDIV	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	EICRB	= 0x3a
                                 .equ	EIMSK	= 0x39
                                 .equ	EIFR	= 0x38
                                 .equ	TIMSK	= 0x37
                                 .equ	TIFR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OCR0	= 0x31
                                 .equ	ASSR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	OCDR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	SFIOR	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR0	= 0x0c
                                 .equ	UCSR0A	= 0x0b
                                 .equ	UCSR0B	= 0x0a
                                 .equ	UBRR0L	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	PORTE	= 0x03
                                 .equ	DDRE	= 0x02
                                 .equ	PINE	= 0x01
                                 .equ	PINF	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR00	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR01	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR02	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR03	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR04	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR05	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR06	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR07	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	UCSZ2	= UCSZ02	; For compatibility
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL0	= 6	; USART Mode Select
                                 
                                 ; UBRR0H - USART Baud Rate Register Hight Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR11	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR12	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR13	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR14	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR15	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR16	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR17	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL1	= 6	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register Hight Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	SM2	= 2	; Sleep Mode Select
                                 .equ	SM0	= 3	; Sleep Mode Select
                                 .equ	SM1	= 4	; Sleep Mode Select
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	SRW10	= 6	; External SRAM Wait State Select
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW11	= 1	; Wait state select bit upper page
                                 .equ	SRW00	= 2	; Wait state select bit lower page
                                 .equ	SRW01	= 3	; Wait state select bit lower page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value
                                 .equ	CAL1	= 1	; Oscillator Calibration Value
                                 .equ	CAL2	= 2	; Oscillator Calibration Value
                                 .equ	CAL3	= 3	; Oscillator Calibration Value
                                 .equ	CAL4	= 4	; Oscillator Calibration Value
                                 .equ	CAL5	= 5	; Oscillator Calibration Value
                                 .equ	CAL6	= 6	; Oscillator Calibration Value
                                 .equ	CAL7	= 7	; Oscillator Calibration Value
                                 
                                 ; XDIV - XTAL Divide Control Register
                                 .equ	XDIV0	= 0	; XTAl Divide Select Bit 0
                                 .equ	XDIV1	= 1	; XTAl Divide Select Bit 1
                                 .equ	XDIV2	= 2	; XTAl Divide Select Bit 2
                                 .equ	XDIV3	= 3	; XTAl Divide Select Bit 3
                                 .equ	XDIV4	= 4	; XTAl Divide Select Bit 4
                                 .equ	XDIV5	= 5	; XTAl Divide Select Bit 5
                                 .equ	XDIV6	= 6	; XTAl Divide Select Bit 6
                                 .equ	XDIVEN	= 7	; XTAL Divide Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** MISC *************************
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR321	= 0	; Prescaler Reset Timer/Counter3, Timer/Counter2, and Timer/Counter1
                                 .equ	PSR1	= PSR321	; For compatibility
                                 .equ	PSR2	= PSR321	; For compatibility
                                 .equ	PSR3	= PSR321	; For compatibility
                                 .equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 .equ	PUD	= 2	; Pull Up Disable
                                 ;.equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	GICR	= EIMSK	; For compatibility
                                 .equ	GIMSK	= EIMSK	; For compatibility
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	GIFR	= EIFR	; For compatibility
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 0
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; ASSR - Asynchronus Status Register
                                 .equ	TCR0UB	= 0	; Timer/Counter Control Register 0 Update Busy
                                 .equ	OCR0UB	= 1	; Output Compare register 0 Busy
                                 .equ	TCN0UB	= 2	; Timer/Counter0 Update Busy
                                 .equ	AS0	= 3	; Asynchronus Timer/Counter 0
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE1C	= 0	; Timer/Counter 1, Output Compare Match C Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF1C	= 0	; Timer/Counter 1, Output Compare C Match Flag
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare for channel C
                                 .equ	FOC1B	= 6	; Force Output Compare for channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for channel A
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TCCR2 - Timer/Counter Control Register
                                 .equ	CS20	= 0	; Clock Select
                                 .equ	CS21	= 1	; Clock Select
                                 .equ	CS22	= 2	; Clock Select
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Match Output Mode
                                 .equ	COM21	= 5	; Compare Match Output Mode
                                 .equ	WGM20	= 6	; Wafeform Generation Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter Register
                                 .equ	TCNT2_0	= 0	; Timer/Counter Register Bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter Register Bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter Register Bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter Register Bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter Register Bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter Register Bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter Register Bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter Register Bit 7
                                 
                                 ; OCR2 - Output Compare Register
                                 .equ	OCR2_0	= 0	; Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Output Compare Register Bit 7
                                 
                                 ; TIMSK - 
                                 .equ	TOIE2	= 6	; 
                                 .equ	OCIE2	= 7	; 
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE3C	= 1	; Timer/Counter3, Output Compare Match Interrupt Enable
                                 .equ	TOIE3	= 2	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3B	= 3	; Timer/Counter3 Output CompareB Match Interrupt Enable
                                 .equ	OCIE3A	= 4	; Timer/Counter3 Output CompareA Match Interrupt Enable
                                 .equ	TICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF3C	= 1	; Timer/Counter3 Output Compare C Match Flag
                                 .equ	TOV3	= 2	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3B	= 3	; Output Compare Flag 1B
                                 .equ	OCF3A	= 4	; Output Compare Flag 1A
                                 .equ	ICF3	= 5	; Input Capture Flag 1
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	PSR1	= PSR321	; For compatibility
                                 ;.equ	PSR2	= PSR321	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM30	= WGM30	; For compatibility
                                 .equ	WGM31	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM31	= WGM31	; For compatibility
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Comparet Ouput Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 3A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Clock Select 3 bit 0
                                 .equ	CS31	= 1	; Clock Select 3 bit 1
                                 .equ	CS32	= 2	; Clock Select3 bit 2
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	CTC30	= WGM32	; For compatibility
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	CTC31	= WGM33	; For compatibility
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3  Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare for channel C
                                 .equ	FOC3B	= 6	; Force Output Compare for channel B
                                 .equ	FOC3A	= 7	; Force Output Compare for channel A
                                 
                                 ; TCNT3L - Timer/Counter3 Low Byte
                                 .equ	TCN3L0	= 0	; Timer/Counter 3 bit 0
                                 .equ	TCN3L1	= 1	; Timer/Counter 3 bit 1
                                 .equ	TCN3L2	= 2	; Timer/Counter 3 bit 2
                                 .equ	TCN3L3	= 3	; Timer/Counter 3 bit 3
                                 .equ	TCN3L4	= 4	; Timer/Counter 3 bit 4
                                 .equ	TCN3L5	= 5	; Timer/Counter 3 bit 5
                                 .equ	TCN3L6	= 6	; Timer/Counter 3 bit 6
                                 .equ	TCN3L7	= 7	; Timer/Counter 3 bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	WDTON	= 0	; Watchdog timer always on
                                 .equ	M103C	= 1	; ATmega103 compatibility mode
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0xffff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 4096
                                 .equ	RAMEND	= 0x10ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 131072
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 4096
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xf000
                                 .equ	NRWW_STOP_ADDR	= 0xffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xefff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0xfe00
                                 .equ	SECONDBOOTSTART	= 0xfc00
                                 .equ	THIRDBOOTSTART	= 0xf800
                                 .equ	FOURTHBOOTSTART	= 0xf000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	OC2addr	= 0x0012	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0014	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0016	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0018	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001a	; Timer/Counter Compare Match B
                                 .equ	OVF1addr	= 0x001c	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x001e	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0020	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0024	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0026	; USART0 Data Register Empty
                                 .equ	UTXC0addr	= 0x0028	; USART0, Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	OC1Caddr	= 0x0030	; Timer/Counter1 Compare Match C
                                 .equ	ICP3addr	= 0x0032	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0034	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0036	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0038	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x003a	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x003c	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x003e	; USART1, Data Register Empty
                                 .equ	UTXC1addr	= 0x0040	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x0042	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0044	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 70	; size in words
                                 
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
000000 940c 0080                 
000002 9518                      		reti		                 
000003 0000                      		nop			; Vector Addresses are 2 words apart
000004 9518                      		reti			; External 0 interrupt  Vector 
000005 0000                      		nop			; Vector Addresses are 2 words apart
000006 9518                      		reti			; External 1 interrupt  Vector 
000007 0000                      		nop			; Vector Addresses are 2 words apart
000008 9518                      		reti			; External 2 interrupt  Vector 
000009 0000                      		nop			; Vector Addresses are 2 words apart
00000a 9518                      		reti			; External 3 interrupt  Vector 
00000b 0000                      		nop			; Vector Addresses are 2 words apart
00000c 9518                      		reti			; External 4 interrupt  Vector 
00000d 0000                      		nop			; Vector Addresses are 2 words apart
00000e 9518                      		reti			; External 5 interrupt  Vector 
00000f 0000                      		nop			; Vector Addresses are 2 words apart
000010 9518                      		reti			; External 6 interrupt  Vector 
000011 0000                      		nop			; Vector Addresses are 2 words apart
000012 9518                      		reti			; External 7 interrupt  Vector 
000013 0000                      		nop			; Vector Addresses are 2 words apart
000014 9518                      		reti			; Timer 2 Compare Vector 
000015 0000                      		nop			; Vector Addresses are 2 words apart
000016 9518                      		reti			; Timer 2 Overflow Vector 
000017 0000                      		nop			; Vector Addresses are 2 words apart
000018 9518                      		reti			; Timer 1 Capture  Vector 
000019 0000                      		nop			; Vector Addresses are 2 words apart
00001a 9518                      		reti			; Timer1 CompareA  Vector 
00001b 0000                      		nop			; Vector Addresses are 2 words apart
00001c 9518                      		reti			; Timer 1 CompareB  Vector 
                                 		;nop			; Vector Addresses are 2 words apart
                                 		;reti
00001d 0000                      		nop			; Timer 1 Overflow  Vector 
00001e 940c 0109                 		jmp interruptVector		; Timer 0 Compare  Vector 
                                 ;reti
000020 0000                      		nop			; Vector Addresses are 2 words apart
000021 9518                      		reti			; Timer 0 Overflow interrupt  Vector 
000022 0000                      		nop			; Vector Addresses are 2 words apart
000023 9518                      		reti			; SPI  Vector 
000024 0000                      		nop			; Vector Addresses are 2 words apart
000025 9518                      		reti			; UART Receive  Vector 
000026 0000                      		nop			; Vector Addresses are 2 words apart
000027 9518                      		reti			; UDR Empty  Vector 
000028 0000                      		nop			; Vector Addresses are 2 words apart
000029 9518                      		reti			; UART Transmit  Vector 
00002a 0000                      		nop			; Vector Addresses are 2 words apart
00002b 9518                      		reti			; ADC Conversion Complete Vector 
00002c 0000                      		nop			; Vector Addresses are 2 words apart
00002d 9518                      		reti			; EEPROM Ready Vector 
00002e 0000                      		nop			; Vector Addresses are 2 words apart
00002f 9518                      		reti			; Analog Comparator  Vector 
                                 
                                 .org		$0080			; start address well above interrupt table
                                 
                                 Init: 
                                 ;##### Stack Pointer Setup Code #####
                                 
000080 e00f                      	ldi r16, $0F		; Stack Pointer Setup to 0x0FFF
000081 bf0e                      	out SPH,r16			; Stack Pointer High Byte 
000082 ef0f                      	ldi r16, $FF		; Stack Pointer Setup 
000083 bf0d                      	out SPL,r16			; Stack Pointer Low Byte 
                                    
                                 ;###### RAMPZ Setup Code #####
                                 
                                 ;	lower memory page arithmetic
000084 e000                      	ldi  r16, $00		; 1 = EPLM acts on upper 64K
000085 bf0b                      	out RAMPZ, r16		; 0 = EPLM acts on lower 64K
                                    
                                 ;###### Sleep Mode And SRAM #####
                                 
                                 ;	Tell it we want read and write activity on RE WR
                                 /*	ldi r16, $C0		; Idle Mode - SE bit in MCUCR not set
                                 	out MCUCR, r16	*/	; External SRAM Enable Wait State Enabled
                                    
                                 ;##### Comparator Setup Code #####
                                 	;CHECKME
000086 e800                      	ldi r16,$80			; Comparator Disabled, Input Capture Disabled 
000087 b908                      	out ACSR, r16		; Comparator Settings
                                 
                                 ;##### Timer0 Setup Code #####
000088 e00f                      	ldi r16,$0F			; Timer 0 Setup
000089 bf03                      	out TCCR0, r16		; Timer - PRESCALE TCK0 BY 256
                                 						; (devide the 8 Mhz clock by 256)
                                 						; clear timer on OCR0 match
00008a e90c                      	ldi r16,$9C			; load OCR0 with n=78
00008b bf01                      	out OCR0,r16		; The counter will go every
                                                            ; n*256*125 nsec
                                 
                                 ;##### Interrupts setup #####
00008c e002                      	ldi r16, $02		; OCIE0
00008d bf07                      	out TIMSK, r16		; T0: Output compare match 
                                 
00008e 9478                      	sei
                                 
                                 .MACRO jeq
                                    brne pc+2
                                    rjmp @0
                                 .ENDMACRO
                                 .MACRO jne
                                    breq pc+2
                                    rjmp @0
                                 .ENDMACRO
                                 .MACRO jlo
                                    brsh pc+2
                                    rjmp @0
                                 .ENDMACRO
                                 .MACRO jge
                                 	brlo pc+2
                                 	rjmp @0
                                 .ENDMACRO
                                 .MACRO jlt
                                 	brge pc+2
                                 	rjmp @0
                                 .ENDMACRO
                                 
                                 .MACRO cge
                                 	brlo pc+3
                                 	call @0
                                 .ENDMACRO
                                 .INCLUDE "LCDdriver.inc"
                                 
                                 #define LCD_DRIVER_INC
                                 ; REGISTER [0],[1] writes [1] to [0]
                                 .MACRO REGISTER
                                 	push r20
                                 	push r19
                                 	push r18
                                 	ldi r20, @0
                                 	ldi r19, @1
                                 	rcall writeRegister
                                 	pop r18
                                 	pop r19
                                 	pop r20
                                 .ENDMACRO
                                 .MACRO REGISTERR
                                 	push r20
                                 	push r19
                                 	push r18
                                 	ldi r20, @0
                                 	mov r19, @1
                                 	rcall writeRegister
                                 	pop r18
                                 	pop r19
                                 	pop r20
                                 .ENDMACRO
                                 ; WRITESTRING [0],[1] writes string [0] of length [1](reg)
                                 .MACRO WRITESTRING
                                 	push r20
                                 	push r19
                                 	push r18
                                 	mov r18, @1
                                 	ldi ZH, high(@0*2)
                                 	ldi ZL, low(@0*2)
                                 	rcall stringOut
                                 	pop r18
                                 	pop r19
                                 	pop r20
                                 .ENDMACRO
                                 ; WRITECHAR [0] writes character [0]
                                 .MACRO WRITECHAR
                                 	push r20
                                 	push r19
                                 	push r18
                                 	ldi r18, @0
                                 	rcall charOut
                                 	pop r18
                                 	pop r19
                                 	pop r20
                                 .ENDMACRO
                                 ; WRITECSTRING [0],[1] writes string [0] of length [1](reg) using custom characters
                                 .MACRO WRITECSTRING
                                 	push r20
                                 	push r19
                                 	push r18
                                 	mov r18, @1
                                 ;	ldi r18, @1
                                 	ldi ZH, high(@0*2)
                                 	ldi ZL, low(@0*2)
                                 	rcall cStringOut
                                 	pop r18
                                 	pop r19
                                 	pop r20
                                 .ENDMACRO
                                 ; WRITECCHAR [0] writes custom character [0]
                                 .MACRO WRITECCHAR
                                 	push r20
                                 	push r19
                                 	push r18
                                 	ldi r18, @0
                                 	rcall cCharOut
                                 	pop r18
                                 	pop r19
                                 	pop r20
                                 .ENDMACRO
                                 ; CREATECHAR [0],[1] creates a custom character given by bytetable [0] with char code [1]
                                 .MACRO CREATECHAR
                                 	push r20
                                 	push r19
                                 	push r18
                                 	ldi r19, @1
                                 	ldi ZH, high(@0*2)
                                 	ldi ZL, low(@0*2)
                                 	rcall addChar
                                 	pop r18
                                 	pop r19
                                 	pop r20
                                 .ENDMACRO
00008f 940c 00c1                 jmp LCDskip
                                 .INCLUDE "char.asm"
                                 
                                 #define chars
                                 al:
000091 0000
000092 0300
000093 090c
000094 6d11
000095 6083
000096 031c
000097 0000
000098 0000                      	.db 0b00000000, 0b00000000, 0b00000000, 0b00000011, 0b00001100, 0b00001001, 0b00010001, 0b01101101, 0b10000011, 0b01100000, 0b00011100, 0b00000011, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 ar:
000099 0000
00009a c000
00009b f0f0
00009c f6f8
00009d 06c1
00009e c038
00009f 0000
0000a0 0000                      	.db 0b00000000, 0b00000000, 0b00000000, 0b11000000, 0b11110000, 0b11110000, 0b11111000, 0b11110110, 0b11000001, 0b00000110, 0b00111000, 0b11000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 rl:
0000a1 0000
0000a2 0100
0000a3 0202
0000a4 0202
0000a5 0a06
0000a6 120b
0000a7 1b17
0000a8 0211                      	.db 0b00000000, 0b00000000, 0b00000000, 0b00000001, 0b00000010, 0b00000010, 0b00000010, 0b00000010, 0b00000110, 0b00001010, 0b00001011, 0b00010010, 0b00010111, 0b00011011, 0b00010001, 0b00000010
                                 rr:
0000a9 0000
0000aa 8000
0000ab 4040
0000ac 4040
0000ad 5060
0000ae 48d0
0000af 58e8
0000b0 4008                      	.db 0b00000000, 0b00000000, 0b00000000, 0b10000000, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b01100000, 0b01010000, 0b11010000, 0b01001000, 0b11101000, 0b01011000, 0b00001000, 0b01000000
                                 pl:
0000b1 0300
0000b2 0303
0000b3 0303
0000b4 0f03
0000b5 7f1e
0000b6 5f5f
0000b7 7f5e
0000b8 0000                      	.db 0b00000000, 0b00000011, 0b00000011, 0b00000011, 0b00000011, 0b00000011, 0b00000011, 0b00001111, 0b00011110, 0b01111111, 0b01011111, 0b01011111, 0b01011110, 0b01111111, 0b00000000, 0b00000000
                                 pr:
0000b9 c000
0000ba 4040
0000bb 4040
0000bc 7040
0000bd ce58
0000be 0aca
0000bf fe0a
0000c0 0000                      	.db 0b00000000, 0b11000000, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b01000000, 0b01110000, 0b01011000, 0b11001110, 0b11001010, 0b00001010, 0b00001010, 0b11111110, 0b00000000, 0b00000000
                                 #endif
                                 LCDskip:
                                 #endif
                                 
                                 ;###### LCD setup #####
                                 
0000c1 d330                      rcall setupLCD
                                 /*REGISTER $2A, $00
                                 REGISTER $2B, $00
                                 REGISTER $2C, $00
                                 REGISTER $2D, $00*/
0000c2 934f
0000c3 933f
0000c4 932f
0000c5 e030
0000c6 e0f1
0000c7 e4e2
0000c8 d5c9
0000c9 912f
0000ca 913f
0000cb 914f                      CREATECHAR rl , $00
0000cc 934f
0000cd 933f
0000ce 932f
0000cf e031
0000d0 e0f1
0000d1 e5e2
0000d2 d5bf
0000d3 912f
0000d4 913f
0000d5 914f                      CREATECHAR rr, $01
0000d6 934f
0000d7 933f
0000d8 932f
0000d9 e032
0000da e0f1
0000db e6e2
0000dc d5b5
0000dd 912f
0000de 913f
0000df 914f                      CREATECHAR pl, $02
0000e0 934f
0000e1 933f
0000e2 932f
0000e3 e033
0000e4 e0f1
0000e5 e7e2
0000e6 d5ab
0000e7 912f
0000e8 913f
0000e9 914f                      CREATECHAR pr, $03
0000ea 934f
0000eb 933f
0000ec 932f
0000ed e034
0000ee e0f1
0000ef e2e2
0000f0 d5a1
0000f1 912f
0000f2 913f
0000f3 914f                      CREATECHAR al, $04
0000f4 934f
0000f5 933f
0000f6 932f
0000f7 e035
0000f8 e0f1
0000f9 e3e2
0000fa d597
0000fb 912f
0000fc 913f
0000fd 914f                      CREATECHAR ar, $05
0000fe d2dc                      rcall clrLCD
                                 /*;Rocket:
                                 WRITECCHAR $00
                                 WRITECCHAR $01
                                 ;Player:
                                 WRITECCHAR $02
                                 WRITECCHAR $03
                                 ;Alien:
                                 WRITECCHAR $04
                                 WRITECCHAR $05
                                 */
                                 
                                 ;##############
                                 
0000ff e090                      ldi writeFlag, 0
000100 e070                      ldi compFlag, 0
                                 
                                 ;##### The start of the program #####
                                 Main:
000101 d059                      	rcall initPpl
000102 d2d8                      	rcall clrLCD
                                 retPt:
000103 d093                      	rcall menu
000104 d097                      	rcall modeSelect
000105 e010                      	ldi r17, $00
000106 d0a6                      	rcall foeLoop
000107 d095                      	rcall deathScreen
                                 
000108 cff8                      	rjmp Main
                                 
                                 ;##### Interrupt vector code #####
                                 
                                 interruptVector:
000109 b64f                      	in r4, SREG
00010a 932f                       	push r18
00010b 937f                      	push r23
00010c d2ab                      	rcall buttonRead
00010d 2f82                      	mov shift, r18
00010e 917f                      	pop r23
00010f 912f                      	pop r18
000110 3072                      	cpi compFlag, 2
000111 f029                      	breq movLoop
000112 9573                      	inc compFlag
000113 be4f                      	out SREG, r4
000114 9518                      	reti
                                 endP:
000115 be4f                      	out SREG, r4
000116 9518                      	reti
                                 
                                 movLoop:
000117 fd90                      	sbrc writeFlag, 0
000118 f3e1                      	breq endP
000119 ff91                      	sbrs writeFlag, 1
00011a 940e 013e                 	call clrRow
00011c fd91                      	sbrc writeFlag, 1
00011d 940e 014b                 	call nastyHack
00011f 7f9d                      	cbr writeFlag, (1<<1)
000120 e070                      	ldi compFlag, 0
000121 d002                      	rcall playerLoop
000122 be4f                      	out SREG, r4
000123 9518                      	reti
                                 
                                 playerLoop:
000124 3787                      	cpi shift, $77
000125 f029                      	breq movLeft
000126 3b87                      	cpi shift, $B7
000127 f039                      	breq movRight
000128 3d87                      	cpi shift, $D7
000129 f049                      	breq shoot
00012a 9508                      	ret
                                 
                                 
                                 movLeft:
00012b 3050                      	cpi playerPos, 0
00012c f009                      	breq movLend
00012d 955a                      	dec playerPos
                                 movLend:
00012e 9508                      	ret
                                 	
                                 movRight:
00012f 315f                      	cpi playerPos, 31
000130 f009                      	breq movRend
000131 9553                      	inc playerPos
                                 movRend:
000132 9508                      	ret
                                 	
                                 
                                 shoot:
000133 6092                      	sbr writeFlag, (1<<1)
000134 93ef                      	push r30
000135 93ff                      	push r31
000136 91e0 0161                 	lds ZL, sixL
000138 91f0 0160                 	lds ZH, sixH
00013a 8350                      	st Z, playerPos
00013b 91ff                      	pop r31
00013c 91ef                      	pop r30
00013d 9508                      	ret
                                 
                                 clrRow:
00013e 930f                      	push r16
00013f 93ef                      	push r30
000140 93ff                      	push r31
000141 e000                      	ldi r16, 0
000142 91f0 0160                 	lds ZH, sixH
000144 91e0 0161                 	lds ZL, sixL
000146 8300                      	st Z, r16
000147 91ff                      	pop r31
000148 91ef                      	pop r30
000149 910f                      	pop r16
00014a 9508                      	ret
                                 
                                 nastyHack:
00014b 3050                      	cpi playerPos, 0
00014c f009
00014d c00c                      	jne noNastyHack
00014e 930f                      	push r16
00014f 93ef                      	push r30
000150 93ff                      	push r31
000151 e001                      	ldi r16, 1
000152 91e0 0161                 	lds ZL, sixL
000154 91f0 0160                 	lds ZH, sixH
000156 8300                      	st Z, r16
000157 91ff                      	pop r31
000158 91ef                      	pop r30
000159 910f                      	pop r16
                                 noNastyHack:	
00015a 9508                      	ret
                                 	
                                 
                                 ;##### Loops #####
                                 initPpl:
00015b e144                      	ldi foeLength, 20
00015c e02d                      	ldi loLength, 13
00015d e030                      	ldi roLength, 0
00015e e261                      	ldi blnkRowl, 33
00015f e050                      	ldi playerPos, 0
000160 e0f2                      	ldi ZH, HIGH(2*foe1)
000161 e0e0                      	ldi ZL, LOW(2*foe1)
000162 2f04                      	mov r16, foeLength
000163 940e 033d                 	call foeRow
000165 e0f2                      	ldi ZH, HIGH(2*foe2)
000166 e2e8                      	ldi ZL, LOW(2*foe2)
000167 2f04                      	mov r16, foeLength
000168 940e 033d                 	call foeRow
00016a e0f2                      	ldi ZH, HIGH(2*foe3)
00016b e5e0                      	ldi ZL, LOW(2*foe3)
00016c 2f04                      	mov r16, foeLength
00016d 940e 033d                 	call foeRow
00016f e0f2                      	ldi ZH, HIGH(2*foe4)
000170 e7e8                      	ldi ZL, LOW(2*foe4)
000171 2f04                      	mov r16, foeLength
000172 940e 033d                 	call foeRow
000174 e0f2                      	ldi ZH, HIGH(2*rockets)
000175 ebe0                      	ldi ZL, LOW(2*rockets)
000176 93e0 0161                 	sts sixL, ZL
000178 93f0 0160                 	sts sixH, ZH
00017a 940e 0348                 	call rocketRows
00017c e0d2                      	ldi YH, HIGH(2*foePoint)
00017d eac0                      	ldi YL, LOW(2*foePoint)
00017e e0f2                      	ldi ZH, HIGH(2*foe1)
00017f e0e0                      	ldi ZL, LOW(2*foe1)
000180 83e8                      	st Y, ZL
000181 9621                      	adiw Y, 1
000182 83f8                      	st Y, ZH
000183 9621                      	adiw Y, 1
000184 e0f2                      	ldi ZH, HIGH(2*foe2)
000185 e2e8                      	ldi ZL, LOW(2*foe2)
000186 83e8                      	st Y, ZL
000187 9621                      	adiw Y, 1
000188 83f8                      	st Y, ZH
000189 9621                      	adiw Y, 1
00018a e0f2                      	ldi ZH, HIGH(2*foe3)
00018b e5e0                      	ldi ZL, LOW(2*foe3)
00018c 83e8                      	st Y, ZL
00018d 9621                      	adiw Y, 1
00018e 83f8                      	st Y, ZH
00018f 9621                      	adiw Y, 1
000190 e0f2                      	ldi ZH, HIGH(2*foe4)
000191 e7e8                      	ldi ZL, LOW(2*foe4)
000192 83e8                      	st Y, ZL
000193 9621                      	adiw Y, 1
000194 83f8                      	st Y, ZH
000195 9621                      	adiw Y, 1
                                 
000196 9508                      	ret
                                 
                                 menu:
000197 fd90                      	sbrc writeFlag, 0
000198 f011                      	breq menu1
000199 6091                      	sbr writeFlag, (1<<0)
                                 
00019a 7f9e                      	cbr writeFlag, (1<<0)
                                 menu1:
00019b 9508                      	ret
                                 
                                 modeSelect:
                                 
00019c 9508                      	ret
                                 
                                 deathScreen:
00019d 930f                      	push r16
00019e e10a                      	ldi r16, 26
00019f 934f
0001a0 933f
0001a1 932f
0001a2 2f20
0001a3 e0fd
0001a4 ebe4
0001a5 d3ad
0001a6 912f
0001a7 913f
0001a8 914f                      	WRITESTRING uDed, r16
0001a9 940e 03ab                 	call BiglyDel
0001ab 910f                      	pop r16
0001ac cf56                      	rjmp retPt
                                 
                                 
                                 foeLoop:
0001ad 9513                      	inc r17
                                 run1:
0001ae d00b                      	rcall screenUpdate
0001af 952a                      	dec loLength
0001b0 9533                      	inc roLength
0001b1 3020                      	cpi loLength, $00
0001b2 f009                      	breq reverse
                                 
0001b3 cffa                      	rjmp run1
                                 
                                 
                                 reverse:
0001b4 d005                      	rcall screenUpdate
0001b5 953a                      	dec roLength
0001b6 9523                      	inc loLength
0001b7 3030                      	cpi roLength, $00
0001b8 f3a1                      	breq foeLoop
                                 
0001b9 cffa                      	rjmp reverse
                                 
                                 
                                 ;##### General routines #####
                                 
                                 screenUpdate:
0001ba d220                      	rcall clrLCD
0001bb 934f
0001bc 933f
0001bd 932f
0001be e24a
0001bf e030
0001c0 d347
0001c1 912f
0001c2 913f
0001c3 914f                      	REGISTER $2A, $00
0001c4 934f
0001c5 933f
0001c6 932f
0001c7 e24b
0001c8 e030
0001c9 d33e
0001ca 912f
0001cb 913f
0001cc 914f                      	REGISTER $2B, $00
0001cd 934f
0001ce 933f
0001cf 932f
0001d0 e24c
0001d1 e030
0001d2 d335
0001d3 912f
0001d4 913f
0001d5 914f                      	REGISTER $2C, $00
0001d6 934f
0001d7 933f
0001d8 932f
0001d9 e24d
0001da e030
0001db d32c
0001dc 912f
0001dd 913f
0001de 914f                      	REGISTER $2D, $00
0001df 940e 01e4                 	call row1
0001e1 940e 028d                 	call esc
0001e3 9508                      	ret
                                 
                                 row1:
0001e4 3015                      	cpi r17, 5
0001e5 f010
0001e6 940e 0207                 	cge row2
0001e8 934f
0001e9 933f
0001ea 932f
0001eb 2f22
0001ec e0fd
0001ed e7e4
0001ee d364
0001ef 912f
0001f0 913f
0001f1 914f                      	WRITESTRING lo, loLength
0001f2 934f
0001f3 933f
0001f4 932f
0001f5 2f24
0001f6 e0f2
0001f7 e0e0
0001f8 d3cb
0001f9 912f
0001fa 913f
0001fb 914f                      	WRITECSTRING foe1, foeLength
0001fc 934f
0001fd 933f
0001fe 932f
0001ff 2f23
000200 e0fd
000201 e8e2
000202 d350
000203 912f
000204 913f
000205 914f                      	WRITESTRING ro, roLength
000206 9508                      	ret
                                 
                                 row2:
000207 3019                      	cpi r17, 9
000208 f010
000209 940e 022a                 	cge row3
00020b 934f
00020c 933f
00020d 932f
00020e 2f22
00020f e0fd
000210 e7e4
000211 d341
000212 912f
000213 913f
000214 914f                      	WRITESTRING lo, loLength
000215 934f
000216 933f
000217 932f
000218 2f24
000219 e0f2
00021a e2e8
00021b d3a8
00021c 912f
00021d 913f
00021e 914f                      	WRITECSTRING foe2, foeLength
00021f 934f
000220 933f
000221 932f
000222 2f23
000223 e0fd
000224 e8e2
000225 d32d
000226 912f
000227 913f
000228 914f                      	WRITESTRING ro, roLength
000229 9508                      	ret
                                 
                                 row3:
00022a 301d                      	cpi r17, 13
00022b f010
00022c 940e 024d                 	cge row4
00022e 934f
00022f 933f
000230 932f
000231 2f22
000232 e0fd
000233 e7e4
000234 d31e
000235 912f
000236 913f
000237 914f                      	WRITESTRING lo, loLength
000238 934f
000239 933f
00023a 932f
00023b 2f24
00023c e0f2
00023d e5e0
00023e d385
00023f 912f
000240 913f
000241 914f                      	WRITECSTRING foe3, foeLength
000242 934f
000243 933f
000244 932f
000245 2f23
000246 e0fd
000247 e8e2
000248 d30a
000249 912f
00024a 913f
00024b 914f                      	WRITESTRING ro, roLength
00024c 9508                      	ret
                                 
                                 row4:
00024d 3111                      	cpi r17, 17
00024e f010
00024f 940e 0270                 	cge row5
000251 934f
000252 933f
000253 932f
000254 2f22
000255 e0fd
000256 e7e4
000257 d2fb
000258 912f
000259 913f
00025a 914f                      	WRITESTRING lo, loLength
00025b 934f
00025c 933f
00025d 932f
00025e 2f24
00025f e0f2
000260 e7e8
000261 d362
000262 912f
000263 913f
000264 914f                      	WRITECSTRING foe4, foeLength
000265 934f
000266 933f
000267 932f
000268 2f23
000269 e0fd
00026a e8e2
00026b d2e7
00026c 912f
00026d 913f
00026e 914f                      	WRITESTRING ro, roLength
00026f 9508                      	ret
                                 
                                 row5:
000270 3115                      	cpi r17, 21
000271 f010
000272 940e 027f                 	cge row6
000274 934f
000275 933f
000276 932f
000277 2f26
000278 e0fd
000279 e9e0
00027a d2d8
00027b 912f
00027c 913f
00027d 914f                      	WRITESTRING blnkRow, blnkRowl
00027e 9508                      	ret
                                 
                                 row6:
00027f 3119                      	cpi r17, 25
000280 f008
000281 cf1b                      	jge deathScreen
000282 934f
000283 933f
000284 932f
000285 2f26
000286 e0fd
000287 e9e0
000288 d2ca
000289 912f
00028a 913f
00028b 914f                      	WRITESTRING blnkRow, blnkRowl
00028c 9508                      	ret
                                 	
                                 esc:
00028d d0c6                      	rcall writePlayer
00028e d004                      	rcall writeRockets
00028f 7f9e                      	cbr writeFlag, (1<<0)
000290 d114                      	rcall BigDel
000291 6091                      	sbr writeFlag, (1<<0)
000292 9508                      	ret
                                 
                                 writeRockets:
000293 930f                      	push r16
000294 931f                      	push r17
000295 936f                      	push r22
000296 93af                      	push r26
000297 93bf                      	push r27
000298 93cf                      	push r28
000299 93df                      	push r29
00029a 91f0 0160                 	lds ZH, sixH
00029c 91e0 0161                 	lds ZL, sixL
00029e e4c0                      	ldi YL, $40
00029f e0d1                      	ldi YH, $01
0002a0 e060                      	ldi r22, 0 ;Times round - gives row of rocket
0002a1 951a                      	dec r17
0002a2 9516                      	lsr r17
0002a3 9516                      	lsr r17
0002a4 9513                      	inc r17
                                 rockLoop:
0002a5 9563                      	inc r22
0002a6 0f16                      	add r17, r22
0002a7 934f
0002a8 933f
0002a9 932f
0002aa e24c
0002ab 2f3c
0002ac d25b
0002ad 912f
0002ae 913f
0002af 914f                      	REGISTERR $2C, YL
0002b0 934f
0002b1 933f
0002b2 932f
0002b3 e24d
0002b4 2f3d
0002b5 d252
0002b6 912f
0002b7 913f
0002b8 914f                      	REGISTERR $2D, YH
0002b9 e1a8                      	ldi r26, 24
0002ba 8100                      	ld r16, Z
0002bb 3000                      	cpi r16, 0
0002bc f409
0002bd c028                      	jeq rockInc
0002be 9f0a                      	mul r16, r26
0002bf 2da0                      	mov r26, r0
0002c0 2db1                      	mov r27, r1
0002c1 934f
0002c2 933f
0002c3 932f
0002c4 e24a
0002c5 2f3a
0002c6 d241
0002c7 912f
0002c8 913f
0002c9 914f                      	REGISTERR $2A, XL
0002ca 934f
0002cb 933f
0002cc 932f
0002cd e24b
0002ce 2f3b
0002cf d238
0002d0 912f
0002d1 913f
0002d2 914f                      	REGISTERR $2B, XH
0002d3 3017                      	cpi r17, 7
0002d4 f008
0002d5 c02c                      	jge killThings
                                 rockOut:
0002d6 934f
0002d7 933f
0002d8 932f
0002d9 e020
0002da d288
0002db 912f
0002dc 913f
0002dd 914f                      	WRITECCHAR $00
0002de 934f
0002df 933f
0002e0 932f
0002e1 e021
0002e2 d280
0002e3 912f
0002e4 913f
0002e5 914f                      	WRITECCHAR $01
                                 
                                 rockInc:
                                 	
0002e6 3066                      	cpi r22, 6
0002e7 f409
0002e8 c00d                      	jeq rockEnd
0002e9 97a0                      	sbiw Y, $20
0002ea 97a0                      	sbiw Y, $20
0002eb 3be0                      	cpi ZL, LOW(2*rockets)
0002ec f409
0002ed c004                      	jeq add5
0002ee 9731                      	sbiw Z, 1
0002ef 1b16                      	sub r17, r22
0002f0 940c 02a5                 	jmp rockLoop
                                 add5:
0002f2 9635                      	adiw Z, 5
0002f3 1b16                      	sub r17, r22
0002f4 940c 02a5                 	jmp rockLoop
                                 rockEnd:
0002f6 93e0 0161                 	sts sixL, ZL
0002f8 93f0 0160                 	sts sixH, ZH
0002fa 91df                      	pop r29
0002fb 91cf                      	pop r28
0002fc 91bf                      	pop r27
0002fd 91af                      	pop r26
0002fe 916f                      	pop r22
0002ff 911f                      	pop r17
000300 910f                      	pop r16 
000301 9508                      	ret
                                 
                                 killThings:
000302 301b                      	cpi r17, 11
000303 f008
000304 cfd1                      	jge rockOut
000305 1702                      	cp r16, loLength
000306 f408
000307 cfce                      	jlo rockOut
000308 5017                      	subi r17, 7
000309 0f11                      	lsl r17
                                 
                                 killComp:
00030a e0b2                      	ldi XH, HIGH(2*foePoint)
00030b eaa0                      	ldi XL, LOW(2*foePoint)
00030c 0fa1                      	add XL, r17
00030d 930f                      	push r16
00030e e000                      	ldi r16, 0
00030f 1fb0                      	adc r27, r16
000310 910f                      	pop r16
000311 91cd                      	ld YL, X+
000312 91dc                      	ld YH, X
000313 932f                      	push r18
000314 1b02                      	sub r16, loLength
000315 0fc0                      	add YL, r16
000316 930f                      	push r16
000317 e000                      	ldi r16, 0
000318 1fd0                      	adc r29, r16
000319 910f                      	pop r16
00031a 9621                      	adiw Y, 1
00031b 933f                      	push r19
00031c 8138                      	ld r19, Y
00031d 3035                      	cpi r19, $05
00031e f409
00031f c00b                      	jeq delAbove
000320 3034                      	cpi r19, $04
000321 f409
000322 c011                      	jeq delRight
000323 913f                      	pop r19
000324 912f                      	pop r18
000325 9516                      	lsr r17
000326 932f                      	push r18
000327 e027                      	ldi r18, 7
000328 0f12                      	add r17, r18
000329 912f                      	pop r18
00032a 9508                      	ret
                                 
                                 delAbove:
00032b 930f                      	push r16
00032c e006                      	ldi r16, $06
00032d 8308                      	st Y, r16
00032e 9721                      	sbiw Y, 1
00032f 8308                      	st Y, r16
000330 e000                      	ldi r16, 0
000331 8300                      	st Z, r16
000332 910f                      	pop r16
000333 9508                      	ret
                                 
                                 delRight:
000334 930f                      	push r16
000335 e006                      	ldi r16, $06
000336 8308                      	st Y, r16
000337 9621                      	adiw Y, 1
000338 8308                      	st Y, r16
000339 e000                      	ldi r16, 0
00033a 8300                      	st Z, r16
00033b 910f                      	pop r16
00033c 9508                      	ret
                                 
                                 	
                                 
                                 foeRow:
00033d 931f                      	push r17
                                 foej:
00033e e014                      	ldi r17, $04
00033f 9311                      	st Z+, r17
000340 e015                      	ldi r17, $05
000341 9311                      	st Z+, r17
000342 5002                      	subi r16, 2
000343 3000                      	cpi r16, 0
000344 f009
000345 cff8                      	jne foej
000346 911f                      	pop r17
000347 9508                      	ret
                                 
                                 rocketRows:
000348 930f                      	push r16
000349 931f                      	push r17
00034a e006                      	ldi r16, 6
                                 rowj:
00034b e010                      	ldi r17, $00
00034c 9311                      	st Z+, r17
00034d 5001                      	subi r16, 1
00034e 3000                      	cpi r16, 0
00034f f009
000350 cffa                      	jne rowj
000351 911f                      	pop r17
000352 910f                      	pop r16
000353 9508                      	ret
                                 
                                 writePlayer:
000354 934f
000355 933f
000356 932f
000357 e24c
000358 e830
000359 d1ae
00035a 912f
00035b 913f
00035c 914f                      	REGISTER $2C, $80
00035d 934f
00035e 933f
00035f 932f
000360 e24d
000361 e031
000362 d1a5
000363 912f
000364 913f
000365 914f                      	REGISTER $2D, $01
000366 934f
000367 933f
000368 932f
000369 2f25
00036a e0fd
00036b e9e0
00036c d1e6
00036d 912f
00036e 913f
00036f 914f                      	WRITESTRING blnkRow, playerPos
000370 934f
000371 933f
000372 932f
000373 e022
000374 d1ee
000375 912f
000376 913f
000377 914f                      	WRITECCHAR $02
000378 934f
000379 933f
00037a 932f
00037b e023
00037c d1e6
00037d 912f
00037e 913f
00037f 914f                      	WRITECCHAR $03
000380 9508                      	ret
                                 
                                 .INCLUDE "delayRoutines.asm"
                                 
000381 93af                      DEL15ms:push r26
000382 93bf                      		push r27
000383 e4be                              ldi XH, HIGH(19997)
000384 e1ad                              ldi XL, LOW (19997)
                                 COUNT:  
000385 9711                              sbiw XL, 1
000386 f7f1                              brne COUNT
000387 91bf                      		pop r27
000388 91af                      		pop r26
000389 9508                              ret
                                 ;
                                 DEL4P1ms:
00038a 93af                      		push r26
00038b 93bf                      		push r27
00038c e1b5                              ldi XH, HIGH(5464)
00038d e5a8                              ldi XL, LOW (5464)
                                 COUNT1:
00038e 9711                              sbiw XL, 1
00038f f7f1                              brne COUNT1
000390 91bf                      		pop r27
000391 91af                      		pop r26
000392 9508                              ret 
                                 ;bigdel
                                 DEL100mus:
000393 93af                      		push r26
000394 93bf                      		push r27
000395 e0b0                              ldi XH, HIGH(131)
000396 e8a3                              ldi XL, LOW (131)
                                 COUNT2:
000397 9711                              sbiw XL, 1
000398 f7f1                              brne COUNT2
000399 91bf                      		pop r27
00039a 91af                      		pop r26
00039b 9508                              ret 
                                 ;
                                 DEL49ms:
00039c 93af                      		push r26
00039d 93bf                      		push r27
00039e efbf                              ldi XH, HIGH(65535)
00039f efaf                              ldi XL, LOW (65535)
                                 COUNT3:
0003a0 9711                              sbiw XL, 1
0003a1 f7f1                              brne COUNT3
0003a2 91bf                      		pop r27
0003a3 91af                      		pop r26
0003a4 9508                              ret
                                 
                                 BigDel:
0003a5 dff6                              rcall Del49ms
                                 #ifndef debugtime
0003a6 dff5                              rcall Del49ms
0003a7 dff4                              rcall Del49ms
0003a8 dff3                      	    rcall Del49ms
0003a9 dff2                              rcall Del49ms
                                 #endif
0003aa 9508                              ret
                                 ;
0003ab dff9                      BiglyDel:   rcall BigDel
0003ac dff8                      			rcall BigDel
0003ad dff7                      			rcall BigDel
0003ae dff6                      			rcall BigDel
0003af dff5                      			rcall BigDel
0003b0 dff4                      			rcall BigDel
0003b1 dff3                      			rcall BigDel
0003b2 dff2                      			rcall BigDel
0003b3 dff1                      			rcall BigDel
0003b4 dff0                      			rcall BigDel
0003b5 dfef                      			rcall BigDel
0003b6 dfee                      			rcall BigDel
                                 			
                                 .INCLUDE "buttons.asm"
0003b7 9508                      
0003b8 930f                      		push r16
0003b9 ef70                      		ldi r23, $F0
0003ba e020                      		ldi r18, $00
0003bb d007                      		rcall initE
0003bc b101                      		in r16, PINE
0003bd 0f20                      		add r18, r16
0003be d004                      		rcall initE
0003bf b101                      		in r16, PINE
0003c0 0f20                      		add r18, r16
0003c1 910f                      		pop r16
0003c2 9508                      		ret
                                 
                                 initE:
0003c3 b973                      		out PORTE, r23
0003c4 9570                      		com R23
0003c5 b972                      		out DDRE, r23
0003c6 9508                      		ret
                                 .INCLUDE "LCDdriver.asm"
                                 
                                 
                                 #endif
                                 #ifndef dels
                                 #define dels
                                 DEL1ms:
0003c7 93af                      		push r26
0003c8 93bf                      		push r27
0003c9 e0b5                              ldi XH, HIGH(1330)
0003ca e3a2                              ldi XL, LOW (1330)
                                 COUNT001:
0003cb 9711                              sbiw XL, 1
0003cc f7f1                              brne COUNT001
0003cd 91bf                      		pop r27
0003ce 91af                      		pop r26
0003cf 9508                              ret 
                                 
                                 Del10ms:
0003d0 dff6                      		rcall DEL1ms
0003d1 dff5                      		rcall DEL1ms
0003d2 dff4                      		rcall DEL1ms
0003d3 dff3                      		rcall DEL1ms
0003d4 dff2                      		rcall DEL1ms
0003d5 dff1                      		rcall DEL1ms
0003d6 dff0                      		rcall DEL1ms
0003d7 dfef                      		rcall DEL1ms
0003d8 dfee                      		rcall DEL1ms
0003d9 dfed                      		rcall DEL1ms
0003da 9508                      		ret
                                 #endif
                                 clrLCD:
0003db 934f                      	push r20
0003dc 933f                      	push r19
0003dd 932f                      	push r18
0003de 934f
0003df 933f
0003e0 932f
0003e1 e84e
0003e2 e830
0003e3 d124
0003e4 912f
0003e5 913f
0003e6 914f                      	REGISTER $8E, $80
0003e7 e84e                      	ldi r20, $8E
                                 clrLCDLoop:
0003e8 d124                      	rcall writeCommand
0003e9 d156                      	rcall startPacket
0003ea d130                      	rcall readData
0003eb d149                      	rcall endPacket
0003ec fd37                      	sbrc r19, 7
0003ed cffa                      	rjmp clrLCDLoop
0003ee 912f                      	pop r18
0003ef 913f                      	pop r19
0003f0 914f                      	pop r20
0003f1 9508                      	ret
                                 
                                 
                                 
                                 setupLCD:
0003f2 e107                      	ldi r16,0b00010111 ; Pin 4 as output for reset
0003f3 bb07                      	out DDRB, r16 ; SS*, SCK, MOSI outputs
0003f4 e000                      	ldi r16, 0
0003f5 bb08                      	out PORTB, r16
0003f6 e50e                      	ldi r16, 0b01011110 ; set SPR0, CPHA, CPOL, MSTR, SPE (Interupts [7] disabled)
0003f7 b90d                      	out SPCR, r16
                                 
0003f8 e000                      	ldi r16, 0
0003f9 bb08                      	out PORTB, r16 ;reset low
0003fa dfcc                      	rcall DEL1ms
0003fb e100                      	ldi r16, 0b00010000 ;reset high
0003fc bb08                      	out PORTB, r16
0003fd dfd2                      	rcall Del10ms
                                 
                                 	; PLL Setup
0003fe 934f
0003ff 933f
000400 932f
000401 e848
000402 e03a
000403 d104
000404 912f
000405 913f
000406 914f                      	REGISTER $88, $0A
000407 dfbf                      	rcall DEL1ms
000408 934f
000409 933f
00040a 932f
00040b e849
00040c e032
00040d d0fa
00040e 912f
00040f 913f
000410 914f                      	REGISTER $89, $02
000411 dfb5                      	rcall DEL1ms
                                 
000412 934f
000413 933f
000414 932f
000415 e140
000416 e030
000417 d0f0
000418 912f
000419 913f
00041a 914f                      	REGISTER $10, $00 ; 8-bit
                                 
00041b 934f
00041c 933f
00041d 932f
00041e e044
00041f e831
000420 d0e7
000421 912f
000422 913f
000423 914f                      	REGISTER $04, $81 ; Pixel clock
000424 dfa2                      	rcall DEL1ms
                                 
                                 	; Horizonatal
000425 934f
000426 933f
000427 932f
000428 e144
000429 e633
00042a d0dd
00042b 912f
00042c 913f
00042d 914f                      	REGISTER $14, $63
00042e 934f
00042f 933f
000430 932f
000431 e145
000432 e030
000433 d0d4
000434 912f
000435 913f
000436 914f                      	REGISTER $15, $00
000437 934f
000438 933f
000439 932f
00043a e146
00043b e033
00043c d0cb
00043d 912f
00043e 913f
00043f 914f                      	REGISTER $16, $03
000440 934f
000441 933f
000442 932f
000443 e147
000444 e033
000445 d0c2
000446 912f
000447 913f
000448 914f                      	REGISTER $17, $03
000449 934f
00044a 933f
00044b 932f
00044c e148
00044d e03b
00044e d0b9
00044f 912f
000450 913f
000451 914f                      	REGISTER $18, $0B
                                 
                                 	; Vertical
000452 934f
000453 933f
000454 932f
000455 e149
000456 ed3f
000457 d0b0
000458 912f
000459 913f
00045a 914f                      	REGISTER $19, $DF
00045b 934f
00045c 933f
00045d 932f
00045e e14a
00045f e031
000460 d0a7
000461 912f
000462 913f
000463 914f                      	REGISTER $1A, $01
000464 934f
000465 933f
000466 932f
000467 e14b
000468 e13f
000469 d09e
00046a 912f
00046b 913f
00046c 914f                      	REGISTER $1B, $1F ;$20
00046d 934f
00046e 933f
00046f 932f
000470 e14c
000471 e030
000472 d095
000473 912f
000474 913f
000475 914f                      	REGISTER $1C, $00
000476 934f
000477 933f
000478 932f
000479 e14d
00047a e136
00047b d08c
00047c 912f
00047d 913f
00047e 914f                      	REGISTER $1D, $16
00047f 934f
000480 933f
000481 932f
000482 e14e
000483 e030
000484 d083
000485 912f
000486 913f
000487 914f                      	REGISTER $1E, $00
000488 934f
000489 933f
00048a 932f
00048b e14f
00048c e031
00048d d07a
00048e 912f
00048f 913f
000490 914f                      	REGISTER $1F, $01
                                 
                                 	; Active window
000491 934f
000492 933f
000493 932f
000494 e340
000495 e030
000496 d071
000497 912f
000498 913f
000499 914f                      	REGISTER $30, $00
00049a 934f
00049b 933f
00049c 932f
00049d e341
00049e e030
00049f d068
0004a0 912f
0004a1 913f
0004a2 914f                      	REGISTER $31, $00
0004a3 934f
0004a4 933f
0004a5 932f
0004a6 e344
0004a7 e13f
0004a8 d05f
0004a9 912f
0004aa 913f
0004ab 914f                      	REGISTER $34, $1F
0004ac 934f
0004ad 933f
0004ae 932f
0004af e345
0004b0 e033
0004b1 d056
0004b2 912f
0004b3 913f
0004b4 914f                      	REGISTER $35, $03
0004b5 934f
0004b6 933f
0004b7 932f
0004b8 e342
0004b9 e030
0004ba d04d
0004bb 912f
0004bc 913f
0004bd 914f                      	REGISTER $32, $00
0004be 934f
0004bf 933f
0004c0 932f
0004c1 e343
0004c2 e030
0004c3 d044
0004c4 912f
0004c5 913f
0004c6 914f                      	REGISTER $33, $00
0004c7 934f
0004c8 933f
0004c9 932f
0004ca e346
0004cb ed3f
0004cc d03b
0004cd 912f
0004ce 913f
0004cf 914f                      	REGISTER $36, $DF
0004d0 934f
0004d1 933f
0004d2 932f
0004d3 e347
0004d4 e031
0004d5 d032
0004d6 912f
0004d7 913f
0004d8 914f                      	REGISTER $37, $01
                                 
0004d9 934f
0004da 933f
0004db 932f
0004dc e84e
0004dd e830
0004de d029
0004df 912f
0004e0 913f
0004e1 914f                      	REGISTER $8E, $80
0004e2 deed                      	rcall Del10ms
                                 
                                 	; Display on
0004e3 934f
0004e4 933f
0004e5 932f
0004e6 e041
0004e7 e830
0004e8 d01f
0004e9 912f
0004ea 913f
0004eb 914f                      	REGISTER $01, $80
0004ec 934f
0004ed 933f
0004ee 932f
0004ef ec47
0004f0 e031
0004f1 d016
0004f2 912f
0004f3 913f
0004f4 914f                      	REGISTER $C7, $01
                                 
                                 	; PWM Backlight
0004f5 934f
0004f6 933f
0004f7 932f
0004f8 e84a
0004f9 e83a
0004fa d00d
0004fb 912f
0004fc 913f
0004fd 914f                      	REGISTER $8A, $8A
0004fe 934f
0004ff 933f
000500 932f
000501 e84b
000502 ef3f
000503 d004
000504 912f
000505 913f
000506 914f                      	REGISTER $8B, $FF
                                 
                                 	
000507 9508                      	ret
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;write [r19] into register [r20]
                                 writeRegister:
000508 d004                      	rcall writeCommand
000509 d036                      	rcall startPacket
00050a d00a                      	rcall writeData
00050b d029                      	rcall endPacket
00050c 9508                      	ret
                                 
                                 ; Write command [r20]
                                 writeCommand:
00050d d032                      	rcall startPacket
00050e e800                      	ldi r16, $80
00050f b90f                      	out SPDR, r16
000510 d021                      	rcall waitTransmit
000511 b94f                      	out SPDR, r20
000512 d01f                      	rcall waitTransmit
000513 d021                      	rcall endPacket
000514 9508                      	ret
                                 
                                 ; Write byte [r19] as data (no packet control)
                                 writeData:
000515 e000                      	ldi r16, 0
000516 b90f                      	out SPDR, r16
000517 d01a                      	rcall waitTransmit
000518 b93f                      	out SPDR, r19
000519 d018                      	rcall waitTransmit
00051a 9508                      	ret
                                 
                                 ; read a byte into [r19] (no packet control)
                                 readData:
00051b e400                      	ldi r16, $40
00051c b90f                      	out SPDR, r16
00051d d014                      	rcall waitTransmit
                                 	;sbi SPSR, SPIF
00051e e000                      	ldi r16, $00
00051f b90f                      	out SPDR, r16
000520 d011                      	rcall waitTransmit
000521 b13f                      	in r19, SPDR
000522 9508                      	ret
                                 
                                 
                                 ; Read register [r20] into [r19]
                                 readRegister:
000523 dfe9                      	rcall writeCommand
000524 d01b                      	rcall startPacket
000525 dff5                      	rcall readData
000526 d00e                      	rcall endPacket
000527 9508                      	ret
                                 	
                                 readStatus:
000528 d017                      	rcall startPacket
000529 ec00                      	ldi r16, 0b11000000
00052a b90f                      	out SPDR, r16
00052b d006                      	rcall waitTransmit
00052c e000                      	ldi r16, $00
00052d b90f                      	out SPDR, r16
00052e d003                      	rcall waitTransmit
00052f b13f                      	in r19, SPDR
000530 d004                      	rcall endPacket
000531 9508                      	ret
                                 
                                 
                                 waitTransmit:
000532 9b77                      	sbis SPSR, SPIF
000533 cffe                      	rjmp waitTransmit
000534 9508                      	ret
                                 
                                 endPacket:
000535 e101                      	ldi r16, 0b00010001
000536 bb08                      	out PORTB, r16 ; End packet
000537 0000
000538 0000
000539 0000
00053a 0000                      	nop nop nop nop
00053b 0000
00053c 0000
00053d 0000
00053e 0000                      	nop nop nop nop
00053f 9508                      	ret
                                 
                                 startPacket:
000540 e100                      	ldi r16, 0b00010000
000541 bb08                      	out PORTB, r16 ; Start packet
000542 0000
000543 0000
000544 0000
000545 0000                      	nop nop nop nop
000546 0000
000547 0000
000548 0000
000549 0000                      	nop nop nop nop
00054a 9508                      	ret
                                 
                                 ; Write char [r18] to screen
                                 charOut:
00054b d0e1                      	rcall initTextOut_
00054c e042                      	ldi r20, $02
00054d dfbf                      	rcall writeCommand
00054e dff1                      	rcall startPacket
00054f 2f32                      	mov r19, r18
000550 dfc4                      	rcall writeData
000551 dfe3                      	rcall endPacket
000552 9508                      	ret
                                 
                                 stringOut:
000553 d0d9                      	rcall initTextOut_
000554 e042                      	ldi r20, $02
000555 dfb7                      	rcall writeCommand
000556 dfe9                      	rcall startPacket
000557 e000                      	ldi r16, 0
000558 b90f                      	out SPDR, r16
000559 dfd8                      	rcall waitTransmit
                                 stringLoop_:
00055a 3020                      	cpi r18, $00
00055b f029                      	breq stringEnd_
00055c 9135                      	lpm r19, Z+
00055d b93f                      	out SPDR, r19
00055e dfd3                      	rcall waitTransmit
00055f 952a                      	dec r18
000560 cff9                      	rjmp stringLoop_
                                 stringEnd_:
000561 dfd3                      	rcall endPacket
000562 9508                      	ret
                                 
                                 cCharOut:
000563 934f
000564 933f
000565 932f
000566 e440
000567 e830
000568 df9f
000569 912f
00056a 913f
00056b 914f                      	REGISTER $40, $80
00056c 934f
00056d 933f
00056e 932f
00056f e441
000570 e030
000571 df96
000572 912f
000573 913f
000574 914f                      	REGISTER $41, $00
000575 934f
000576 933f
000577 932f
000578 e640
000579 e030
00057a df8d
00057b 912f
00057c 913f
00057d 914f                      	REGISTER $60, 0
00057e 934f
00057f 933f
000580 932f
000581 e641
000582 e030
000583 df84
000584 912f
000585 913f
000586 914f                      	REGISTER $61, 0
000587 934f
000588 933f
000589 932f
00058a e642
00058b e030
00058c df7b
00058d 912f
00058e 913f
00058f 914f                      	REGISTER $62, 0
000590 934f
000591 933f
000592 932f
000593 e643
000594 e030
000595 df72
000596 912f
000597 913f
000598 914f                      	REGISTER $63, 0
000599 934f
00059a 933f
00059b 932f
00059c e644
00059d e037
00059e df69
00059f 912f
0005a0 913f
0005a1 914f                      	REGISTER $64, 7
0005a2 934f
0005a3 933f
0005a4 932f
0005a5 e645
0005a6 e030
0005a7 df60
0005a8 912f
0005a9 913f
0005aa 914f                      	REGISTER $65, 0
0005ab 934f
0005ac 933f
0005ad 932f
0005ae e241
0005af ea30
0005b0 df57
0005b1 912f
0005b2 913f
0005b3 914f                      	REGISTER $21, 0b10100000
0005b4 934f
0005b5 933f
0005b6 932f
0005b7 e242
0005b8 e03b
0005b9 df4e
0005ba 912f
0005bb 913f
0005bc 914f                      	REGISTER $22, 0b00001011
0005bd e042                      	ldi r20, $02
0005be df4e                      	rcall writeCommand
0005bf df80                      	rcall startPacket
0005c0 2f32                      	mov r19, r18
0005c1 df53                      	rcall writeData
0005c2 df72                      	rcall endPacket
0005c3 9508                      	ret
                                 
                                 cStringOut:
0005c4 934f
0005c5 933f
0005c6 932f
0005c7 e440
0005c8 e830
0005c9 df3e
0005ca 912f
0005cb 913f
0005cc 914f                      	REGISTER $40, $80
0005cd 934f
0005ce 933f
0005cf 932f
0005d0 e441
0005d1 e030
0005d2 df35
0005d3 912f
0005d4 913f
0005d5 914f                      	REGISTER $41, $00
0005d6 934f
0005d7 933f
0005d8 932f
0005d9 e640
0005da e030
0005db df2c
0005dc 912f
0005dd 913f
0005de 914f                      	REGISTER $60, 0
0005df 934f
0005e0 933f
0005e1 932f
0005e2 e641
0005e3 e030
0005e4 df23
0005e5 912f
0005e6 913f
0005e7 914f                      	REGISTER $61, 0
0005e8 934f
0005e9 933f
0005ea 932f
0005eb e642
0005ec e030
0005ed df1a
0005ee 912f
0005ef 913f
0005f0 914f                      	REGISTER $62, 0
0005f1 934f
0005f2 933f
0005f3 932f
0005f4 e643
0005f5 e030
0005f6 df11
0005f7 912f
0005f8 913f
0005f9 914f                      	REGISTER $63, 0
0005fa 934f
0005fb 933f
0005fc 932f
0005fd e644
0005fe e037
0005ff df08
000600 912f
000601 913f
000602 914f                      	REGISTER $64, 7
000603 934f
000604 933f
000605 932f
000606 e645
000607 e030
000608 deff
000609 912f
00060a 913f
00060b 914f                      	REGISTER $65, 0
00060c 934f
00060d 933f
00060e 932f
00060f e241
000610 ea30
000611 def6
000612 912f
000613 913f
000614 914f                      	REGISTER $21, 0b10100000
000615 934f
000616 933f
000617 932f
000618 e242
000619 e03b
00061a deed
00061b 912f
00061c 913f
00061d 914f                      	REGISTER $22, 0b00001011
                                 /*	ldi r20, $02
                                 	rcall writeCommand
                                 	rcall startPacket
                                 	rcall readData
                                 	rcall endPacket
                                 	sbr r19, 7
                                 	rcall writeCommand
                                 	rcall startPacket
                                 	rcall writeData
                                 	rcall endPacket*/
00061e e042                      	ldi r20, $02
00061f deed                      	rcall writeCommand
000620 df1f                      	rcall startPacket
000621 e030                      	ldi r19, 0
000622 b93f                      	out SPDR, r19
000623 df0e                      	rcall waitTransmit
                                 cStringLoop_:
000624 3020                      	cpi r18, $00
000625 f029                      	breq cStringEnd_
000626 9131                      	ld r19, Z+
                                 	;lpm r19, Z+
000627 b93f                      	out SPDR, r19
000628 df09                      	rcall waitTransmit
000629 952a                      	dec r18
00062a cff9                      	rjmp cStringLoop_
                                 cStringEnd_:
00062b df09                      	rcall endPacket
00062c 9508                      	ret
                                 
                                 initTextOut_:
00062d e440                      	ldi r20, $40
00062e dede                      	rcall writeCommand
00062f df10                      	rcall startPacket
000630 deea                      	rcall readData
000631 df03                      	rcall endPacket
000632 deda                      	rcall writeCommand
000633 6830                      	ori r19, $80
000634 df0b                      	rcall startPacket
000635 dedf                      	rcall writeData
000636 defe                      	rcall endPacket
000637 934f
000638 933f
000639 932f
00063a e241
00063b e030
00063c decb
00063d 912f
00063e 913f
00063f 914f                      	REGISTER $21, $00
                                 /*	ldi r20, $21
                                 	rcall writeCommand
                                 	rcall startPacket
                                 	rcall readData
                                 	rcall endPacket
                                 	cbr r19, 7
                                 	cbr r19, 5
                                 	rcall writeCommand
                                 	rcall startPacket
                                 	rcall writeData
                                 	rcall endPacket*/
000640 934f
000641 933f
000642 932f
000643 e640
000644 e030
000645 dec2
000646 912f
000647 913f
000648 914f                      	REGISTER $60, 0
000649 934f
00064a 933f
00064b 932f
00064c e641
00064d e030
00064e deb9
00064f 912f
000650 913f
000651 914f                      	REGISTER $61, 0
000652 934f
000653 933f
000654 932f
000655 e642
000656 e030
000657 deb0
000658 912f
000659 913f
00065a 914f                      	REGISTER $62, 0
00065b 934f
00065c 933f
00065d 932f
00065e e643
00065f e030
000660 dea7
000661 912f
000662 913f
000663 914f                      	REGISTER $63, 0
000664 934f
000665 933f
000666 932f
000667 e644
000668 e037
000669 de9e
00066a 912f
00066b 913f
00066c 914f                      	REGISTER $64, 7
00066d 934f
00066e 933f
00066f 932f
000670 e645
000671 e030
000672 de95
000673 912f
000674 913f
000675 914f                      	REGISTER $65, 0
000676 934f
000677 933f
000678 932f
000679 e242
00067a e03b
00067b de8c
00067c 912f
00067d 913f
00067e 914f                      	REGISTER $22, 0b00001011
00067f 934f
000680 933f
000681 932f
000682 e441
000683 e030
000684 de83
000685 912f
000686 913f
000687 914f                      	REGISTER $41, 0
000688 934f
000689 933f
00068a 932f
00068b e24e
00068c e030
00068d de7a
00068e 912f
00068f 913f
000690 914f                      	REGISTER $2E, 0
                                 	;cursor
                                 	;REGISTER $2A, $00
                                 	;REGISTER $2B, $00
                                 	;REGISTER $2C, $00
                                 	;REGISTER $2D, $00
000691 9508                      	ret
                                 
                                 
                                 addChar:
000692 933f                      	push r19
                                 /*	ldi r20, $40
                                 	rcall writeCommand
                                 	rcall startPacket
                                 	rcall readData
                                 	rcall endPacket
                                 	rcall writeCommand
                                 	cbr r19, 7
                                 	rcall startPacket
                                 	rcall writeData
                                 	rcall endPacket*/
000693 934f
000694 933f
000695 932f
000696 e440
000697 e030
000698 de6f
000699 912f
00069a 913f
00069b 914f                      	REGISTER $40, 0
00069c 934f
00069d 933f
00069e 932f
00069f e241
0006a0 e030
0006a1 de66
0006a2 912f
0006a3 913f
0006a4 914f                      	REGISTER $21, 0
0006a5 934f
0006a6 933f
0006a7 932f
0006a8 e441
0006a9 e034
0006aa de5d
0006ab 912f
0006ac 913f
0006ad 914f                      	REGISTER $41, 0b000000100
0006ae e243                      	ldi r20, $23
0006af 913f                      	pop r19
0006b0 de57                      	rcall writeRegister
0006b1 e042                      	ldi r20, $02
0006b2 de5a                      	rcall writeCommand
0006b3 e120                      	ldi r18, 16
0006b4 de8b                      	rcall startPacket
0006b5 e000                      	ldi r16, 0
0006b6 b90f                      	out SPDR, r16
0006b7 de7a                      	rcall waitTransmit
0006b8 dea1                      	rcall stringLoop_
0006b9 9508                      	ret
                                 
                                 .INCLUDE "variablesAndByteTables.asm"
                                 
0006ba 2020
0006bb 2020
0006bc 2020
0006bd 2020
0006be 2020
0006bf 2020
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm(2): warning: .cseg .db misalignment - padding zero byte
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(477): '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm' included form here
0006c0 0020                      .db $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
                                 
                                 ro:
0006c1 2020
0006c2 2020
0006c3 2020
0006c4 2020
0006c5 2020
0006c6 2020
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm(5): warning: .cseg .db misalignment - padding zero byte
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(477): '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm' included form here
0006c7 0020                      .db $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
                                 
                                 
                                 .dseg
                                 foe1:
000100                           .byte 20
                                 
                                 foe2:
000114                           .byte 20
                                 
                                 foe3:
000128                           .byte 20
                                 
                                 foe4:
00013c                           .byte 20
                                 
                                 foePoint:
000150                           .byte 8
                                 
000158                           rockets: .byte 8
                                 /*rockets2: .byte 1
                                 rockets3: .byte 1
                                 rockets4: .byte 1
                                 rockets5: .byte 1
                                 rockets6: .byte 1*/
000160                           sixH: .byte 1
000161                           sixL: .byte 1
                                 
                                 .cseg 
                                 blnkRow:
0006c8 2020
0006c9 2020
0006ca 2020
0006cb 2020
0006cc 2020
0006cd 2020
0006ce 2020
0006cf 2020
0006d0 2020
0006d1 2020
0006d2 2020
0006d3 2020
0006d4 2020
0006d5 2020
0006d6 2020
0006d7 2020
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm(35): warning: .cseg .db misalignment - padding zero byte
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(477): '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm' included form here
0006d8 0020                      .db $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
                                 
                                 rocket:
0006d9 0100                      .db $00, $01
                                 
                                 uDed:
0006da 6f43
0006db 676e
0006dc 6172
0006dd 7574
0006de 616c
0006df 6974
0006e0 6e6f
0006e1 2173
0006e2 5920
0006e3 756f
0006e4 6420
0006e5 6569
0006e6 2e64                      .db "Congratulations! You died."
                                 
                                 .def loLength = r18
                                 .def roLength = r19
                                 .def foeLength = r20
                                 .def playerPos = r21
                                 .def blnkRowl = r22
                                 .def compFlag = r23
                                 .def shift = r24


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega128" register use summary:
x  :   2 y  :  26 z  :  13 r0 :   1 r1 :   1 r2 :   0 r3 :   0 r4 :   4 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 103 r17:  34 r18: 249 r19: 307 r20: 291 
r21:   8 r22:  11 r23:  10 r24:   4 r25:  11 r26:  28 r27:  21 r28:   7 
r29:   7 r30:  48 r31:  47 
Registers used: 22 out of 35 (62.9%)

"ATmega128" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   2 add   :   6 adiw  :  11 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  15 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 brlt  :   0 brmi  :   0 
brne  :  10 brpl  :   0 brsh  :   1 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  15 cbi   :   0 cbr   :   3 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :   1 cpc   :   0 
cpi   :  26 cpse  :   0 dec   :   6 elpm  :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   5 inc   :   7 
jmp   :   5 ld    :   5 ldd   :   0 ldi   : 289 lds   :   8 lpm   :   1 
lsl   :   1 lsr   :   3 mov   :  29 movw  :   0 mul   :   1 muls  :   0 
mulsu :   0 neg   :   0 nop   :  38 or    :   0 ori   :   1 out   :  32 
pop   : 340 push  : 340 rcall : 207 ret   :  51 reti  :  25 rjmp  :  20 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 
sbis  :   1 sbiw  :   9 sbr   :   3 sbrc  :   4 sbrs  :   1 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  20 std   :   0 
sts   :   4 sub   :   3 subi  :   3 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 43 out of 114 (37.7%)

"ATmega128" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000dce   3188    186   3374  131072   2.6%
[.dseg] 0x000100 0x000162      0     98     98    4096   2.4%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 3 warnings
