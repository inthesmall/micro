
AVRASM ver. 2.2.6  \\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm Fri Feb 16 17:07:13 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m128def.inc'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(1): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\setup.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(2): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.inc'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(200): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\delayRoutines.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(201): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\buttons.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(202): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.asm(1): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.inc'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(203): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m128def.inc'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(1): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\setup.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(2): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.inc'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(200): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\delayRoutines.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(201): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\buttons.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(202): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.asm'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.asm(1): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\LCDdriver.inc'
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(203): Including file '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm'
                                 
                                 .INCLUDE "setup.asm"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega128.xml ***********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m128def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega128
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega128
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M128DEF_INC_
                                 #define _M128DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega128
                                 #pragma AVRPART ADMIN PART_NAME ATmega128
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x97
                                 .equ	SIGNATURE_002	= 0x02
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UCSR1C	= 0x9d	; MEMORY MAPPED
                                 .equ	UDR1	= 0x9c	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0x9b	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0x9a	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0x98	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0x99	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0x95	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0x90	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x8c	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x8b	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x8a	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x88	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x89	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x86	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x87	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x84	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x85	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x82	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x83	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x80	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x81	; MEMORY MAPPED
                                 .equ	ETIMSK	= 0x7d	; MEMORY MAPPED
                                 .equ	ETIFR	= 0x7c	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x7a	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x78	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x79	; MEMORY MAPPED
                                 .equ	TWCR	= 0x74	; MEMORY MAPPED
                                 .equ	TWDR	= 0x73	; MEMORY MAPPED
                                 .equ	TWAR	= 0x72	; MEMORY MAPPED
                                 .equ	TWSR	= 0x71	; MEMORY MAPPED
                                 .equ	TWBR	= 0x70	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x6f	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x6d	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x6c	; MEMORY MAPPED
                                 .equ	EICRA	= 0x6a	; MEMORY MAPPED
                                 .equ	SPMCSR	= 0x68	; MEMORY MAPPED
                                 .equ	PORTG	= 0x65	; MEMORY MAPPED
                                 .equ	DDRG	= 0x64	; MEMORY MAPPED
                                 .equ	PING	= 0x63	; MEMORY MAPPED
                                 .equ	PORTF	= 0x62	; MEMORY MAPPED
                                 .equ	DDRF	= 0x61	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	XDIV	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	EICRB	= 0x3a
                                 .equ	EIMSK	= 0x39
                                 .equ	EIFR	= 0x38
                                 .equ	TIMSK	= 0x37
                                 .equ	TIFR	= 0x36
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUCSR	= 0x34
                                 .equ	TCCR0	= 0x33
                                 .equ	TCNT0	= 0x32
                                 .equ	OCR0	= 0x31
                                 .equ	ASSR	= 0x30
                                 .equ	TCCR1A	= 0x2f
                                 .equ	TCCR1B	= 0x2e
                                 .equ	TCNT1L	= 0x2c
                                 .equ	TCNT1H	= 0x2d
                                 .equ	OCR1AL	= 0x2a
                                 .equ	OCR1AH	= 0x2b
                                 .equ	OCR1BL	= 0x28
                                 .equ	OCR1BH	= 0x29
                                 .equ	ICR1L	= 0x26
                                 .equ	ICR1H	= 0x27
                                 .equ	TCCR2	= 0x25
                                 .equ	TCNT2	= 0x24
                                 .equ	OCR2	= 0x23
                                 .equ	OCDR	= 0x22
                                 .equ	WDTCR	= 0x21
                                 .equ	SFIOR	= 0x20
                                 .equ	EEARL	= 0x1e
                                 .equ	EEARH	= 0x1f
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	PORTA	= 0x1b
                                 .equ	DDRA	= 0x1a
                                 .equ	PINA	= 0x19
                                 .equ	PORTB	= 0x18
                                 .equ	DDRB	= 0x17
                                 .equ	PINB	= 0x16
                                 .equ	PORTC	= 0x15
                                 .equ	DDRC	= 0x14
                                 .equ	PINC	= 0x13
                                 .equ	PORTD	= 0x12
                                 .equ	DDRD	= 0x11
                                 .equ	PIND	= 0x10
                                 .equ	SPDR	= 0x0f
                                 .equ	SPSR	= 0x0e
                                 .equ	SPCR	= 0x0d
                                 .equ	UDR0	= 0x0c
                                 .equ	UCSR0A	= 0x0b
                                 .equ	UCSR0B	= 0x0a
                                 .equ	UBRR0L	= 0x09
                                 .equ	ACSR	= 0x08
                                 .equ	ADMUX	= 0x07
                                 .equ	ADCSRA	= 0x06
                                 .equ	ADCH	= 0x05
                                 .equ	ADCL	= 0x04
                                 .equ	PORTE	= 0x03
                                 .equ	DDRE	= 0x02
                                 .equ	PINE	= 0x01
                                 .equ	PINF	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; SFIOR - Special Function IO Register
                                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWBR - TWI Bit Rate register
                                 .equ	I2BR	= TWBR	; For compatibility
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	I2CR	= TWCR	; For compatibility
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	I2IE	= TWIE	; For compatibility
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	I2EN	= TWEN	; For compatibility
                                 .equ	ENI2C	= TWEN	; For compatibility
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	I2WC	= TWWC	; For compatibility
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	I2STO	= TWSTO	; For compatibility
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	I2STA	= TWSTA	; For compatibility
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	I2EA	= TWEA	; For compatibility
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 .equ	I2INT	= TWINT	; For compatibility
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	I2SR	= TWSR	; For compatibility
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWS0	= TWPS0	; For compatibility
                                 .equ	I2GCE	= TWPS0	; For compatibility
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS1	= TWPS1	; For compatibility
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	I2S3	= TWS3	; For compatibility
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	I2S4	= TWS4	; For compatibility
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	I2S5	= TWS5	; For compatibility
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	I2S6	= TWS6	; For compatibility
                                 .equ	TWS7	= 7	; TWI Status
                                 .equ	I2S7	= TWS7	; For compatibility
                                 
                                 ; TWDR - TWI Data register
                                 .equ	I2DR	= TWDR	; For compatibility
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	I2AR	= TWAR	; For compatibility
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR00	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR01	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR02	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR03	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR04	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR05	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR06	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR07	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	UCSZ2	= UCSZ02	; For compatibility
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL0	= 6	; USART Mode Select
                                 
                                 ; UBRR0H - USART Baud Rate Register Hight Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR10	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR11	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR12	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR13	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR14	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR15	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR16	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR17	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL1	= 6	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register Hight Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	SM2	= 2	; Sleep Mode Select
                                 .equ	SM0	= 3	; Sleep Mode Select
                                 .equ	SM1	= 4	; Sleep Mode Select
                                 .equ	SE	= 5	; Sleep Enable
                                 .equ	SRW10	= 6	; External SRAM Wait State Select
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW11	= 1	; Wait state select bit upper page
                                 .equ	SRW00	= 2	; Wait state select bit lower page
                                 .equ	SRW01	= 3	; Wait state select bit lower page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value
                                 .equ	CAL1	= 1	; Oscillator Calibration Value
                                 .equ	CAL2	= 2	; Oscillator Calibration Value
                                 .equ	CAL3	= 3	; Oscillator Calibration Value
                                 .equ	CAL4	= 4	; Oscillator Calibration Value
                                 .equ	CAL5	= 5	; Oscillator Calibration Value
                                 .equ	CAL6	= 6	; Oscillator Calibration Value
                                 .equ	CAL7	= 7	; Oscillator Calibration Value
                                 
                                 ; XDIV - XTAL Divide Control Register
                                 .equ	XDIV0	= 0	; XTAl Divide Select Bit 0
                                 .equ	XDIV1	= 1	; XTAl Divide Select Bit 1
                                 .equ	XDIV2	= 2	; XTAl Divide Select Bit 2
                                 .equ	XDIV3	= 3	; XTAl Divide Select Bit 3
                                 .equ	XDIV4	= 4	; XTAl Divide Select Bit 4
                                 .equ	XDIV5	= 5	; XTAl Divide Select Bit 5
                                 .equ	XDIV6	= 6	; XTAl Divide Select Bit 6
                                 .equ	XDIVEN	= 7	; XTAL Divide Enable
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMCR	= SPMCSR	; For compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	ASRE	= RWWSRE	; For compatibility
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	ASB	= RWWSB	; For compatibility
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCSR - MCU Control And Status Register
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 
                                 ; ***** MISC *************************
                                 ; SFIOR - Special Function IO Register
                                 .equ	PSR321	= 0	; Prescaler Reset Timer/Counter3, Timer/Counter2, and Timer/Counter1
                                 .equ	PSR1	= PSR321	; For compatibility
                                 .equ	PSR2	= PSR321	; For compatibility
                                 .equ	PSR3	= PSR321	; For compatibility
                                 .equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 .equ	PUD	= 2	; Pull Up Disable
                                 ;.equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	GICR	= EIMSK	; For compatibility
                                 .equ	GIMSK	= EIMSK	; For compatibility
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	GIFR	= EIFR	; For compatibility
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEWE	= 1	; EEPROM Write Enable
                                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TCCR0 - Timer/Counter Control Register
                                 .equ	CS00	= 0	; Clock Select 0
                                 .equ	CS01	= 1	; Clock Select 1
                                 .equ	CS02	= 2	; Clock Select 2
                                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                                 .equ	CTC0	= WGM01	; For compatibility
                                 .equ	COM00	= 4	; Compare match Output Mode 0
                                 .equ	COM01	= 5	; Compare Match Output Mode 1
                                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                                 .equ	PWM0	= WGM00	; For compatibility
                                 .equ	FOC0	= 7	; Force Output Compare
                                 
                                 ; TCNT0 - Timer/Counter Register
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0 - Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; ASSR - Asynchronus Status Register
                                 .equ	TCR0UB	= 0	; Timer/Counter Control Register 0 Update Busy
                                 .equ	OCR0UB	= 1	; Output Compare register 0 Busy
                                 .equ	TCN0UB	= 2	; Timer/Counter0 Update Busy
                                 .equ	AS0	= 3	; Asynchronus Timer/Counter 0
                                 
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0	= 1	; Output Compare Flag 0
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR0	= 1	; Prescaler Reset Timer/Counter0
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE1C	= 0	; Timer/Counter 1, Output Compare Match C Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF1C	= 0	; Timer/Counter 1, Output Compare C Match Flag
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	CTC10	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	CTC11	= WGM13	; For compatibility
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare for channel C
                                 .equ	FOC1B	= 6	; Force Output Compare for channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for channel A
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TCCR2 - Timer/Counter Control Register
                                 .equ	CS20	= 0	; Clock Select
                                 .equ	CS21	= 1	; Clock Select
                                 .equ	CS22	= 2	; Clock Select
                                 .equ	WGM21	= 3	; Waveform Generation Mode
                                 .equ	CTC2	= WGM21	; For compatibility
                                 .equ	COM20	= 4	; Compare Match Output Mode
                                 .equ	COM21	= 5	; Compare Match Output Mode
                                 .equ	WGM20	= 6	; Wafeform Generation Mode
                                 .equ	PWM2	= WGM20	; For compatibility
                                 .equ	FOC2	= 7	; Force Output Compare
                                 
                                 ; TCNT2 - Timer/Counter Register
                                 .equ	TCNT2_0	= 0	; Timer/Counter Register Bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter Register Bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter Register Bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter Register Bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter Register Bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter Register Bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter Register Bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter Register Bit 7
                                 
                                 ; OCR2 - Output Compare Register
                                 .equ	OCR2_0	= 0	; Output Compare Register Bit 0
                                 .equ	OCR2_1	= 1	; Output Compare Register Bit 1
                                 .equ	OCR2_2	= 2	; Output Compare Register Bit 2
                                 .equ	OCR2_3	= 3	; Output Compare Register Bit 3
                                 .equ	OCR2_4	= 4	; Output Compare Register Bit 4
                                 .equ	OCR2_5	= 5	; Output Compare Register Bit 5
                                 .equ	OCR2_6	= 6	; Output Compare Register Bit 6
                                 .equ	OCR2_7	= 7	; Output Compare Register Bit 7
                                 
                                 ; TIMSK - 
                                 .equ	TOIE2	= 6	; 
                                 .equ	OCIE2	= 7	; 
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2	= 7	; Output Compare Flag 2
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; ETIMSK - Extended Timer/Counter Interrupt Mask Register
                                 .equ	OCIE3C	= 1	; Timer/Counter3, Output Compare Match Interrupt Enable
                                 .equ	TOIE3	= 2	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3B	= 3	; Timer/Counter3 Output CompareB Match Interrupt Enable
                                 .equ	OCIE3A	= 4	; Timer/Counter3 Output CompareA Match Interrupt Enable
                                 .equ	TICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; ETIFR - Extended Timer/Counter Interrupt Flag register
                                 .equ	OCF3C	= 1	; Timer/Counter3 Output Compare C Match Flag
                                 .equ	TOV3	= 2	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3B	= 3	; Output Compare Flag 1B
                                 .equ	OCF3A	= 4	; Output Compare Flag 1A
                                 .equ	ICF3	= 5	; Input Capture Flag 1
                                 
                                 ; SFIOR - Special Function IO Register
                                 ;.equ	PSR321	= 0	; Prescaler Reset, T/C3, T/C2, T/C1
                                 ;.equ	PSR1	= PSR321	; For compatibility
                                 ;.equ	PSR2	= PSR321	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode Bit 0
                                 .equ	PWM30	= WGM30	; For compatibility
                                 .equ	WGM31	= 1	; Waveform Generation Mode Bit 1
                                 .equ	PWM31	= WGM31	; For compatibility
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Comparet Ouput Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 3A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Clock Select 3 bit 0
                                 .equ	CS31	= 1	; Clock Select 3 bit 1
                                 .equ	CS32	= 2	; Clock Select3 bit 2
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	CTC30	= WGM32	; For compatibility
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	CTC31	= WGM33	; For compatibility
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3  Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare for channel C
                                 .equ	FOC3B	= 6	; Force Output Compare for channel B
                                 .equ	FOC3A	= 7	; Force Output Compare for channel A
                                 
                                 ; TCNT3L - Timer/Counter3 Low Byte
                                 .equ	TCN3L0	= 0	; Timer/Counter 3 bit 0
                                 .equ	TCN3L1	= 1	; Timer/Counter 3 bit 1
                                 .equ	TCN3L2	= 2	; Timer/Counter 3 bit 2
                                 .equ	TCN3L3	= 3	; Timer/Counter 3 bit 3
                                 .equ	TCN3L4	= 4	; Timer/Counter 3 bit 4
                                 .equ	TCN3L5	= 5	; Timer/Counter 3 bit 5
                                 .equ	TCN3L6	= 6	; Timer/Counter 3 bit 6
                                 .equ	TCN3L7	= 7	; Timer/Counter 3 bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCR - Watchdog Timer Control Register
                                 .equ	WDTCSR	= WDTCR	; For compatibility
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDTOE	= WDCE	; For compatibility
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADCSR	= ADCSRA	; For compatibility
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADFR	= 5	; ADC  Free Running Select
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	BODEN	= 6	; Brown out detector enable
                                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	CKOPT	= 4	; Oscillator Options
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	WDTON	= 0	; Watchdog timer always on
                                 .equ	M103C	= 1	; ATmega103 compatibility mode
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0xffff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 4096
                                 .equ	RAMEND	= 0x10ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 131072
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 4096
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0xf000
                                 .equ	NRWW_STOP_ADDR	= 0xffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0xefff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0xfe00
                                 .equ	SECONDBOOTSTART	= 0xfc00
                                 .equ	THIRDBOOTSTART	= 0xf800
                                 .equ	FOURTHBOOTSTART	= 0xf000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	OC2addr	= 0x0012	; Timer/Counter2 Compare Match
                                 .equ	OVF2addr	= 0x0014	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0016	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0018	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x001a	; Timer/Counter Compare Match B
                                 .equ	OVF1addr	= 0x001c	; Timer/Counter1 Overflow
                                 .equ	OC0addr	= 0x001e	; Timer/Counter0 Compare Match
                                 .equ	OVF0addr	= 0x0020	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0024	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0026	; USART0 Data Register Empty
                                 .equ	UTXC0addr	= 0x0028	; USART0, Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	OC1Caddr	= 0x0030	; Timer/Counter1 Compare Match C
                                 .equ	ICP3addr	= 0x0032	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0034	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0036	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0038	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x003a	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x003c	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x003e	; USART1, Data Register Empty
                                 .equ	UTXC1addr	= 0x0040	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x0042	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0044	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 70	; size in words
                                 
                                 #endif  /* _M128DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
000000 940c 0080                 
000002 9518                      		reti		                 
000003 0000                      		nop			; Vector Addresses are 2 words apart
000004 9518                      		reti			; External 0 interrupt  Vector 
000005 0000                      		nop			; Vector Addresses are 2 words apart
000006 9518                      		reti			; External 1 interrupt  Vector 
000007 0000                      		nop			; Vector Addresses are 2 words apart
000008 9518                      		reti			; External 2 interrupt  Vector 
000009 0000                      		nop			; Vector Addresses are 2 words apart
00000a 9518                      		reti			; External 3 interrupt  Vector 
00000b 0000                      		nop			; Vector Addresses are 2 words apart
00000c 9518                      		reti			; External 4 interrupt  Vector 
00000d 0000                      		nop			; Vector Addresses are 2 words apart
00000e 9518                      		reti			; External 5 interrupt  Vector 
00000f 0000                      		nop			; Vector Addresses are 2 words apart
000010 9518                      		reti			; External 6 interrupt  Vector 
000011 0000                      		nop			; Vector Addresses are 2 words apart
000012 9518                      		reti			; External 7 interrupt  Vector 
000013 0000                      		nop			; Vector Addresses are 2 words apart
000014 9518                      		reti			; Timer 2 Compare Vector 
000015 0000                      		nop			; Vector Addresses are 2 words apart
000016 9518                      		reti			; Timer 2 Overflow Vector 
000017 0000                      		nop			; Vector Addresses are 2 words apart
000018 9518                      		reti			; Timer 1 Capture  Vector 
000019 0000                      		nop			; Vector Addresses are 2 words apart
00001a 9518                      		reti			; Timer1 CompareA  Vector 
00001b 0000                      		nop			; Vector Addresses are 2 words apart
00001c 9518                      		reti			; Timer 1 CompareB  Vector 
                                 		;nop			; Vector Addresses are 2 words apart
                                 		;reti
00001d 0000                      		nop			; Timer 1 Overflow  Vector 
00001e 940c 009b                 		jmp interruptVector		; Timer 0 Compare  Vector 
                                 ;reti
000020 0000                      		nop			; Vector Addresses are 2 words apart
000021 9518                      		reti			; Timer 0 Overflow interrupt  Vector 
000022 0000                      		nop			; Vector Addresses are 2 words apart
000023 9518                      		reti			; SPI  Vector 
000024 0000                      		nop			; Vector Addresses are 2 words apart
000025 9518                      		reti			; UART Receive  Vector 
000026 0000                      		nop			; Vector Addresses are 2 words apart
000027 9518                      		reti			; UDR Empty  Vector 
000028 0000                      		nop			; Vector Addresses are 2 words apart
000029 9518                      		reti			; UART Transmit  Vector 
00002a 0000                      		nop			; Vector Addresses are 2 words apart
00002b 9518                      		reti			; ADC Conversion Complete Vector 
00002c 0000                      		nop			; Vector Addresses are 2 words apart
00002d 9518                      		reti			; EEPROM Ready Vector 
00002e 0000                      		nop			; Vector Addresses are 2 words apart
00002f 9518                      		reti			; Analog Comparator  Vector 
                                 
                                 .org		$0080			; start address well above interrupt table
                                 
                                 Init: 
                                 ;##### Stack Pointer Setup Code #####
                                 
000080 e00f                      	ldi r16, $0F		; Stack Pointer Setup to 0x0FFF
000081 bf0e                      	out SPH,r16			; Stack Pointer High Byte 
000082 ef0f                      	ldi r16, $FF		; Stack Pointer Setup 
000083 bf0d                      	out SPL,r16			; Stack Pointer Low Byte 
                                    
                                 ;###### RAMPZ Setup Code #####
                                 
                                 ;	lower memory page arithmetic
000084 e000                      	ldi  r16, $00		; 1 = EPLM acts on upper 64K
000085 bf0b                      	out RAMPZ, r16		; 0 = EPLM acts on lower 64K
                                    
                                 ;###### Sleep Mode And SRAM #####
                                 
                                 ;	Tell it we want read and write activity on RE WR
                                 /*	ldi r16, $C0		; Idle Mode - SE bit in MCUCR not set
                                 	out MCUCR, r16	*/	; External SRAM Enable Wait State Enabled
                                    
                                 ;##### Comparator Setup Code #####
                                 	;CHECKME
000086 e800                      	ldi r16,$80			; Comparator Disabled, Input Capture Disabled 
000087 b908                      	out ACSR, r16		; Comparator Settings
                                 
                                 ;##### Timer0 Setup Code #####
000088 e00f                      	ldi r16,$0F			; Timer 0 Setup
000089 bf03                      	out TCCR0, r16		; Timer - PRESCALE TCK0 BY 256
                                 						; (devide the 8 Mhz clock by 256)
                                 						; clear timer on OCR0 match
00008a e90c                      	ldi r16,$9C			; load OCR0 with n=78
00008b bf01                      	out OCR0,r16		; The counter will go every
                                                            ; n*256*125 nsec
                                 
                                 ;##### Interrupts setup #####
00008c e002                      	ldi r16, $02		; OCIE0
00008d bf07                      	out TIMSK, r16		; T0: Output compare match 
                                 
00008e 9478                      	sei
                                 
                                 .MACRO jeq
                                    brne pc+2
                                    rjmp @0
                                 .ENDMACRO
                                 .MACRO jne
                                    breq pc+2
                                    rjmp @0
                                 .ENDMACRO
                                 .MACRO jlo
                                    brsh pc+2
                                    rjmp @0
                                 .ENDMACRO
                                 .MACRO jge
                                 	brlo pc+2
                                 	rjmp @0
                                 .ENDMACRO
                                 .MACRO jlt
                                 	brge pc+2
                                 	rjmp @0
                                 .ENDMACRO
                                 .INCLUDE "LCDdriver.inc"
                                 
                                 #define LCD_DRIVER_INC
                                 ; REGISTER [0],[1] writes [1] to [0]
                                 .MACRO REGISTER
                                 	push r20
                                 	push r19
                                 	push r18
                                 	ldi r20, @0
                                 	ldi r19, @1
                                 	rcall writeRegister
                                 	pop r18
                                 	pop r19
                                 	pop r20
                                 .ENDMACRO
                                 ; WRITESTRING [0],[1] writes string [0] of length [1](reg)
                                 .MACRO WRITESTRING
                                 	push r20
                                 	push r19
                                 	push r18
                                 	mov r18, @1
                                 	ldi ZH, high(@0*2)
                                 	ldi ZL, low(@0*2)
                                 	rcall stringOut
                                 	pop r18
                                 	pop r19
                                 	pop r20
                                 .ENDMACRO
                                 ; WRITECHAR [0] writes character [0]
                                 .MACRO WRITECHAR
                                 	push r20
                                 	push r19
                                 	push r18
                                 	ldi r18, @0
                                 	rcall charOut
                                 	pop r18
                                 	pop r19
                                 	pop r20
                                 .ENDMACRO
                                 ; WRITECSTRING [0],[1] writes string [0] of length [1](reg) using custom characters
                                 .MACRO WRITECSTRING
                                 	push r20
                                 	push r19
                                 	push r18
                                 	mov r18, @1
                                 ;	ldi r18, @1
                                 	ldi ZH, high(@0*2)
                                 	ldi ZL, low(@0*2)
                                 	rcall cStringOut
                                 	pop r18
                                 	pop r19
                                 	pop r20
                                 .ENDMACRO
                                 ; WRITECCHAR [0] writes custom character [0]
                                 .MACRO WRITECCHAR
                                 	push r20
                                 	push r19
                                 	push r18
                                 	ldi r18, @0
                                 	rcall cCharOut
                                 	pop r18
                                 	pop r19
                                 	pop r20
                                 .ENDMACRO
                                 ; CREATECHAR [0],[1] creates a custom character given by bytetable [0] with char code [1]
                                 .MACRO CREATECHAR
                                 	push r20
                                 	push r19
                                 	push r18
                                 	ldi r19, @1
                                 	ldi ZH, high(@0*2)
                                 	ldi ZL, low(@0*2)
                                 	rcall addChar
                                 	pop r18
                                 	pop r19
                                 	pop r20
                                 .ENDMACRO
                                 #endif
                                 
                                 ;###### LCD setup #####
                                 
00008f d1a7                      rcall setupLCD
                                 /*REGISTER $2A, $00
                                 REGISTER $2B, $00
                                 REGISTER $2C, $00
                                 REGISTER $2D, $00*/
                                 /*CREATECHAR rl , $00
                                 CREATECHAR rr, $01
                                 CREATECHAR pl, $02
                                 CREATECHAR pr, $03
                                 CREATECHAR al, $04
                                 CREATECHAR ar, $05*/
000090 d18f                      rcall clrLCD
                                 /*;Rocket:
                                 WRITECCHAR $00
                                 WRITECCHAR $01
                                 ;Player:
                                 WRITECCHAR $02
                                 WRITECCHAR $03
                                 ;Alien:
                                 WRITECCHAR $04
                                 WRITECCHAR $05
                                 */
                                 ;##############
                                 
000091 e090                      ldi writeFlag, 0
000092 e070                      ldi compFlag, 0
                                 
                                 ;##### The start of the program #####
                                 Main:
000093 d02a                      	rcall initPpl
000094 d18b                      	rcall clrLCD
                                 retPt:
000095 d02e                      	rcall menu
000096 d032                      	rcall modeSelect
000097 e010                      	ldi r17, $00
000098 d03f                      	rcall foeLoop
000099 d030                      	rcall deathScreen
                                 
00009a cff8                      	rjmp Main
                                 
                                 ;##### Interrupt vector code #####
                                 
                                 interruptVector:
00009b b64f                      	in r4, SREG
00009c 932f                       	push r18
00009d 937f                      	push r23
00009e d15e                      	rcall buttonRead
00009f 2f82                      	mov shift, r18
0000a0 917f                      	pop r23
0000a1 912f                      	pop r18
0000a2 3179                      	cpi compFlag, 25
0000a3 f029                      	breq movLoop
0000a4 9573                      	inc compFlag
0000a5 be4f                      	out SREG, r4
0000a6 9518                      	reti
                                 endP:
0000a7 be4f                      	out SREG, r4
0000a8 9518                      	reti
                                 
                                 movLoop:
0000a9 3091                      	cpi writeFlag, 1
0000aa f3e1                      	breq endP
0000ab e070                      	ldi compFlag, 0
0000ac d001                      	rcall playerLoop
0000ad 9518                      	reti
                                 
                                 playerLoop:
0000ae 3787                      	cpi shift, $77
0000af f029                      	breq movLeft
0000b0 3b87                      	cpi shift, $B7
0000b1 f039                      	breq movRight
0000b2 3d87                      	cpi shift, $D7
0000b3 f049                      	breq shoot
0000b4 9508                      	ret
                                 
                                 
                                 movLeft:
0000b5 3050                      	cpi playerPos, 0
0000b6 f009                      	breq movLend
0000b7 955a                      	dec playerPos
                                 movLend:
0000b8 9508                      	ret
                                 	
                                 movRight:
0000b9 315f                      	cpi playerPos, 31
0000ba f009                      	breq movRend
0000bb 9553                      	inc playerPos
                                 movRend:
0000bc 9508                      	ret
                                 	
                                 
                                 shoot:
0000bd 9508                      	ret
                                 
                                 ;##### Loops #####
                                 initPpl:
0000be e144                      	ldi foeLength, 20
0000bf e02d                      	ldi loLength, 13
0000c0 e030                      	ldi roLength, 0
0000c1 e261                      	ldi blnkRowl, 33
0000c2 e050                      	ldi playerPos, 0
0000c3 9508                      	ret
                                 
                                 menu:
0000c4 3091                      	cpi writeFlag, 1
0000c5 f011                      	breq menu1
0000c6 e091                      	ldi writeFlag, 1
                                 
0000c7 e090                      	ldi writeFlag, 0
                                 menu1:
0000c8 9508                      	ret
                                 
                                 modeSelect:
                                 
0000c9 9508                      	ret
                                 
                                 deathScreen:
0000ca 930f                      	push r16
0000cb e10a                      	ldi r16, 26
0000cc 934f
0000cd 933f
0000ce 932f
0000cf 2f20
0000d0 e0fa
0000d1 e5e0
0000d2 d2c5
0000d3 912f
0000d4 913f
0000d5 914f                      	WRITESTRING uDed, r16
0000d6 910f                      	pop r16
0000d7 cfbd                      	rjmp retPt
                                 
                                 
                                 foeLoop:
0000d8 9513                      	inc r17
                                 run1:
0000d9 d00b                      	rcall screenUpdate
0000da 952a                      	dec loLength
0000db 9533                      	inc roLength
0000dc 3020                      	cpi loLength, $00
0000dd f009                      	breq reverse
                                 
0000de cffa                      	rjmp run1
                                 
                                 
                                 reverse:
0000df d005                      	rcall screenUpdate
0000e0 953a                      	dec roLength
0000e1 9523                      	inc loLength
0000e2 3030                      	cpi roLength, $00
0000e3 f3a1                      	breq foeLoop
                                 
0000e4 cffa                      	rjmp reverse
                                 
                                 
                                 ;##### General routines #####
                                 
                                 screenUpdate:
0000e5 d13a                      	rcall clrLCD
0000e6 934f
0000e7 933f
0000e8 932f
0000e9 e24a
0000ea e030
0000eb d261
0000ec 912f
0000ed 913f
0000ee 914f                      	REGISTER $2A, $00
0000ef 934f
0000f0 933f
0000f1 932f
0000f2 e24b
0000f3 e030
0000f4 d258
0000f5 912f
0000f6 913f
0000f7 914f                      	REGISTER $2B, $00
0000f8 934f
0000f9 933f
0000fa 932f
0000fb e24c
0000fc e030
0000fd d24f
0000fe 912f
0000ff 913f
000100 914f                      	REGISTER $2C, $00
000101 934f
000102 933f
000103 932f
000104 e24d
000105 e030
000106 d246
000107 912f
000108 913f
000109 914f                      	REGISTER $2D, $00
00010a 934f
00010b 933f
00010c 932f
00010d 2f22
00010e e0f9
00010f efee
000110 d287
000111 912f
000112 913f
000113 914f                      	WRITESTRING lo, loLength
000114 934f
000115 933f
000116 932f
000117 2f24
000118 e0fa
000119 e1ea
00011a d2ee
00011b 912f
00011c 913f
00011d 914f                      	WRITECSTRING foe, foeLength
00011e 934f
00011f 933f
000120 932f
000121 2f23
000122 e0fa
000123 e0ec
000124 d273
000125 912f
000126 913f
000127 914f                      	WRITESTRING ro, roLength
                                 	
000128 3015                      	cpi r17, 5
000129 f40c
00012a c063                      	jlt esc
00012b 934f
00012c 933f
00012d 932f
00012e 2f22
00012f e0f9
000130 efee
000131 d266
000132 912f
000133 913f
000134 914f                      	WRITESTRING lo, loLength
000135 934f
000136 933f
000137 932f
000138 2f24
000139 e0fa
00013a e1ea
00013b d2cd
00013c 912f
00013d 913f
00013e 914f                      	WRITECSTRING foe, foeLength
00013f 934f
000140 933f
000141 932f
000142 2f23
000143 e0fa
000144 e0ec
000145 d252
000146 912f
000147 913f
000148 914f                      	WRITESTRING ro, roLength
000149 3019                      	cpi r17, 9
00014a f40c
00014b c042                      	jlt esc
00014c 934f
00014d 933f
00014e 932f
00014f 2f22
000150 e0f9
000151 efee
000152 d245
000153 912f
000154 913f
000155 914f                      	WRITESTRING lo, loLength
000156 934f
000157 933f
000158 932f
000159 2f24
00015a e0fa
00015b e1ea
00015c d2ac
00015d 912f
00015e 913f
00015f 914f                      	WRITECSTRING foe, foeLength
000160 934f
000161 933f
000162 932f
000163 2f23
000164 e0fa
000165 e0ec
000166 d231
000167 912f
000168 913f
000169 914f                      	WRITESTRING ro, roLength
00016a 301d                      	cpi r17, 13
00016b f40c
00016c c021                      	jlt esc
00016d 934f
00016e 933f
00016f 932f
000170 2f22
000171 e0f9
000172 efee
000173 d224
000174 912f
000175 913f
000176 914f                      	WRITESTRING lo, loLength
000177 934f
000178 933f
000179 932f
00017a 2f24
00017b e0fa
00017c e1ea
00017d d28b
00017e 912f
00017f 913f
000180 914f                      	WRITECSTRING foe, foeLength
000181 934f
000182 933f
000183 932f
000184 2f23
000185 e0fa
000186 e0ec
000187 d210
000188 912f
000189 913f
00018a 914f                      	WRITESTRING ro, roLength
00018b 3111                      	cpi r17, 17
00018c f008
00018d cf3c                      	jge deathScreen
                                 esc:
00018e d00e                      	rcall writePlayer
00018f d05e                      	rcall BigDel
000190 e090                      	ldi writeFlag, 0
000191 9508                      	ret
                                 
                                 
                                 writeBlnkRow:
000192 934f
000193 933f
000194 932f
000195 2f26
000196 e0fa
000197 e2ee
000198 d1ff
000199 912f
00019a 913f
00019b 914f                      	WRITESTRING blnkRow, blnkRowl
00019c 9508                      	ret
                                 
                                 writePlayer:
00019d 934f
00019e 933f
00019f 932f
0001a0 e24c
0001a1 e830
0001a2 d1aa
0001a3 912f
0001a4 913f
0001a5 914f                      	REGISTER $2C, $80
0001a6 934f
0001a7 933f
0001a8 932f
0001a9 e24d
0001aa e031
0001ab d1a1
0001ac 912f
0001ad 913f
0001ae 914f                      	REGISTER $2D, $01
0001af 934f
0001b0 933f
0001b1 932f
0001b2 2f25
0001b3 e0fa
0001b4 e2ee
0001b5 d1e2
0001b6 912f
0001b7 913f
0001b8 914f                      	WRITESTRING blnkRow, playerPos
0001b9 934f
0001ba 933f
0001bb 932f
0001bc e022
0001bd d1ea
0001be 912f
0001bf 913f
0001c0 914f                      	WRITECCHAR $02
0001c1 934f
0001c2 933f
0001c3 932f
0001c4 e023
0001c5 d1e2
0001c6 912f
0001c7 913f
0001c8 914f                      	WRITECCHAR $03
0001c9 9508                      	ret
                                 
                                 .INCLUDE "delayRoutines.asm"
                                 
0001ca 93af                      DEL15ms:push r26
0001cb 93bf                      		push r27
0001cc e4be                              ldi XH, HIGH(19997)
0001cd e1ad                              ldi XL, LOW (19997)
                                 COUNT:  
0001ce 9711                              sbiw XL, 1
0001cf f7f1                              brne COUNT
0001d0 91bf                      		pop r27
0001d1 91af                      		pop r26
0001d2 9508                              ret
                                 ;
                                 DEL4P1ms:
0001d3 93af                      		push r26
0001d4 93bf                      		push r27
0001d5 e1b5                              ldi XH, HIGH(5464)
0001d6 e5a8                              ldi XL, LOW (5464)
                                 COUNT1:
0001d7 9711                              sbiw XL, 1
0001d8 f7f1                              brne COUNT1
0001d9 91bf                      		pop r27
0001da 91af                      		pop r26
0001db 9508                              ret 
                                 ;bigdel
                                 DEL100mus:
0001dc 93af                      		push r26
0001dd 93bf                      		push r27
0001de e0b0                              ldi XH, HIGH(131)
0001df e8a3                              ldi XL, LOW (131)
                                 COUNT2:
0001e0 9711                              sbiw XL, 1
0001e1 f7f1                              brne COUNT2
0001e2 91bf                      		pop r27
0001e3 91af                      		pop r26
0001e4 9508                              ret 
                                 ;
                                 DEL49ms:
0001e5 93af                      		push r26
0001e6 93bf                      		push r27
0001e7 efbf                              ldi XH, HIGH(65535)
0001e8 efaf                              ldi XL, LOW (65535)
                                 COUNT3:
0001e9 9711                              sbiw XL, 1
0001ea f7f1                              brne COUNT3
0001eb 91bf                      		pop r27
0001ec 91af                      		pop r26
0001ed 9508                              ret
                                 
                                 BigDel:
0001ee dff6                              rcall Del49ms
                                 #ifndef debugtime
                                 #endif
0001ef 9508                              ret
                                 ;
0001f0 dffd                      BiglyDel:   rcall BigDel
0001f1 dffc                      			rcall BigDel
0001f2 dffb                      			rcall BigDel
0001f3 dffa                      			rcall BigDel
0001f4 dff9                      			rcall BigDel
0001f5 dff8                      			rcall BigDel
0001f6 dff7                      			rcall BigDel
0001f7 dff6                      			rcall BigDel
0001f8 dff5                      			rcall BigDel
0001f9 dff4                      			rcall BigDel
0001fa dff3                      			rcall BigDel
0001fb dff2                      			rcall BigDel
                                 			
                                 .INCLUDE "buttons.asm"
0001fc 9508                      
0001fd 930f                      		push r16
0001fe ef70                      		ldi r23, $F0
0001ff e020                      		ldi r18, $00
000200 d007                      		rcall initE
000201 b101                      		in r16, PINE
000202 0f20                      		add r18, r16
000203 d004                      		rcall initE
000204 b101                      		in r16, PINE
000205 0f20                      		add r18, r16
000206 910f                      		pop r16
000207 9508                      		ret
                                 
                                 initE:
000208 b973                      		out PORTE, r23
000209 9570                      		com R23
00020a b972                      		out DDRE, r23
00020b 9508                      		ret
                                 .INCLUDE "LCDdriver.asm"
                                 
                                 
                                 #endif
                                 #ifndef dels
                                 #define dels
                                 DEL1ms:
00020c 93af                      		push r26
00020d 93bf                      		push r27
00020e e0b5                              ldi XH, HIGH(1330)
00020f e3a2                              ldi XL, LOW (1330)
                                 COUNT001:
000210 9711                              sbiw XL, 1
000211 f7f1                              brne COUNT001
000212 91bf                      		pop r27
000213 91af                      		pop r26
000214 9508                              ret 
                                 
                                 Del10ms:
000215 dff6                      		rcall DEL1ms
000216 dff5                      		rcall DEL1ms
000217 dff4                      		rcall DEL1ms
000218 dff3                      		rcall DEL1ms
000219 dff2                      		rcall DEL1ms
00021a dff1                      		rcall DEL1ms
00021b dff0                      		rcall DEL1ms
00021c dfef                      		rcall DEL1ms
00021d dfee                      		rcall DEL1ms
00021e dfed                      		rcall DEL1ms
00021f 9508                      		ret
                                 #endif
                                 clrLCD:
000220 934f                      	push r20
000221 933f                      	push r19
000222 932f                      	push r18
000223 934f
000224 933f
000225 932f
000226 e84e
000227 e830
000228 d124
000229 912f
00022a 913f
00022b 914f                      	REGISTER $8E, $80
00022c e84e                      	ldi r20, $8E
                                 clrLCDLoop:
00022d d124                      	rcall writeCommand
00022e d156                      	rcall startPacket
00022f d130                      	rcall readData
000230 d149                      	rcall endPacket
000231 fd37                      	sbrc r19, 7
000232 cffa                      	rjmp clrLCDLoop
000233 912f                      	pop r18
000234 913f                      	pop r19
000235 914f                      	pop r20
000236 9508                      	ret
                                 
                                 
                                 
                                 setupLCD:
000237 e107                      	ldi r16,0b00010111 ; Pin 4 as output for reset
000238 bb07                      	out DDRB, r16 ; SS*, SCK, MOSI outputs
000239 e000                      	ldi r16, 0
00023a bb08                      	out PORTB, r16
00023b e50e                      	ldi r16, 0b01011110 ; set SPR0, CPHA, CPOL, MSTR, SPE (Interupts [7] disabled)
00023c b90d                      	out SPCR, r16
                                 
00023d e000                      	ldi r16, 0
00023e bb08                      	out PORTB, r16 ;reset low
00023f dfcc                      	rcall DEL1ms
000240 e100                      	ldi r16, 0b00010000 ;reset high
000241 bb08                      	out PORTB, r16
000242 dfd2                      	rcall Del10ms
                                 
                                 	; PLL Setup
000243 934f
000244 933f
000245 932f
000246 e848
000247 e03a
000248 d104
000249 912f
00024a 913f
00024b 914f                      	REGISTER $88, $0A
00024c dfbf                      	rcall DEL1ms
00024d 934f
00024e 933f
00024f 932f
000250 e849
000251 e032
000252 d0fa
000253 912f
000254 913f
000255 914f                      	REGISTER $89, $02
000256 dfb5                      	rcall DEL1ms
                                 
000257 934f
000258 933f
000259 932f
00025a e140
00025b e030
00025c d0f0
00025d 912f
00025e 913f
00025f 914f                      	REGISTER $10, $00 ; 8-bit
                                 
000260 934f
000261 933f
000262 932f
000263 e044
000264 e831
000265 d0e7
000266 912f
000267 913f
000268 914f                      	REGISTER $04, $81 ; Pixel clock
000269 dfa2                      	rcall DEL1ms
                                 
                                 	; Horizonatal
00026a 934f
00026b 933f
00026c 932f
00026d e144
00026e e633
00026f d0dd
000270 912f
000271 913f
000272 914f                      	REGISTER $14, $63
000273 934f
000274 933f
000275 932f
000276 e145
000277 e030
000278 d0d4
000279 912f
00027a 913f
00027b 914f                      	REGISTER $15, $00
00027c 934f
00027d 933f
00027e 932f
00027f e146
000280 e033
000281 d0cb
000282 912f
000283 913f
000284 914f                      	REGISTER $16, $03
000285 934f
000286 933f
000287 932f
000288 e147
000289 e033
00028a d0c2
00028b 912f
00028c 913f
00028d 914f                      	REGISTER $17, $03
00028e 934f
00028f 933f
000290 932f
000291 e148
000292 e03b
000293 d0b9
000294 912f
000295 913f
000296 914f                      	REGISTER $18, $0B
                                 
                                 	; Vertical
000297 934f
000298 933f
000299 932f
00029a e149
00029b ed3f
00029c d0b0
00029d 912f
00029e 913f
00029f 914f                      	REGISTER $19, $DF
0002a0 934f
0002a1 933f
0002a2 932f
0002a3 e14a
0002a4 e031
0002a5 d0a7
0002a6 912f
0002a7 913f
0002a8 914f                      	REGISTER $1A, $01
0002a9 934f
0002aa 933f
0002ab 932f
0002ac e14b
0002ad e13f
0002ae d09e
0002af 912f
0002b0 913f
0002b1 914f                      	REGISTER $1B, $1F ;$20
0002b2 934f
0002b3 933f
0002b4 932f
0002b5 e14c
0002b6 e030
0002b7 d095
0002b8 912f
0002b9 913f
0002ba 914f                      	REGISTER $1C, $00
0002bb 934f
0002bc 933f
0002bd 932f
0002be e14d
0002bf e136
0002c0 d08c
0002c1 912f
0002c2 913f
0002c3 914f                      	REGISTER $1D, $16
0002c4 934f
0002c5 933f
0002c6 932f
0002c7 e14e
0002c8 e030
0002c9 d083
0002ca 912f
0002cb 913f
0002cc 914f                      	REGISTER $1E, $00
0002cd 934f
0002ce 933f
0002cf 932f
0002d0 e14f
0002d1 e031
0002d2 d07a
0002d3 912f
0002d4 913f
0002d5 914f                      	REGISTER $1F, $01
                                 
                                 	; Active window
0002d6 934f
0002d7 933f
0002d8 932f
0002d9 e340
0002da e030
0002db d071
0002dc 912f
0002dd 913f
0002de 914f                      	REGISTER $30, $00
0002df 934f
0002e0 933f
0002e1 932f
0002e2 e341
0002e3 e030
0002e4 d068
0002e5 912f
0002e6 913f
0002e7 914f                      	REGISTER $31, $00
0002e8 934f
0002e9 933f
0002ea 932f
0002eb e344
0002ec e13f
0002ed d05f
0002ee 912f
0002ef 913f
0002f0 914f                      	REGISTER $34, $1F
0002f1 934f
0002f2 933f
0002f3 932f
0002f4 e345
0002f5 e033
0002f6 d056
0002f7 912f
0002f8 913f
0002f9 914f                      	REGISTER $35, $03
0002fa 934f
0002fb 933f
0002fc 932f
0002fd e342
0002fe e030
0002ff d04d
000300 912f
000301 913f
000302 914f                      	REGISTER $32, $00
000303 934f
000304 933f
000305 932f
000306 e343
000307 e030
000308 d044
000309 912f
00030a 913f
00030b 914f                      	REGISTER $33, $00
00030c 934f
00030d 933f
00030e 932f
00030f e346
000310 ed3f
000311 d03b
000312 912f
000313 913f
000314 914f                      	REGISTER $36, $DF
000315 934f
000316 933f
000317 932f
000318 e347
000319 e031
00031a d032
00031b 912f
00031c 913f
00031d 914f                      	REGISTER $37, $01
                                 
00031e 934f
00031f 933f
000320 932f
000321 e84e
000322 e830
000323 d029
000324 912f
000325 913f
000326 914f                      	REGISTER $8E, $80
000327 deed                      	rcall Del10ms
                                 
                                 	; Display on
000328 934f
000329 933f
00032a 932f
00032b e041
00032c e830
00032d d01f
00032e 912f
00032f 913f
000330 914f                      	REGISTER $01, $80
000331 934f
000332 933f
000333 932f
000334 ec47
000335 e031
000336 d016
000337 912f
000338 913f
000339 914f                      	REGISTER $C7, $01
                                 
                                 	; PWM Backlight
00033a 934f
00033b 933f
00033c 932f
00033d e84a
00033e e83a
00033f d00d
000340 912f
000341 913f
000342 914f                      	REGISTER $8A, $8A
000343 934f
000344 933f
000345 932f
000346 e84b
000347 ef3f
000348 d004
000349 912f
00034a 913f
00034b 914f                      	REGISTER $8B, $FF
                                 
                                 	
00034c 9508                      	ret
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ;write [r19] into register [r20]
                                 writeRegister:
00034d d004                      	rcall writeCommand
00034e d036                      	rcall startPacket
00034f d00a                      	rcall writeData
000350 d029                      	rcall endPacket
000351 9508                      	ret
                                 
                                 ; Write command [r20]
                                 writeCommand:
000352 d032                      	rcall startPacket
000353 e800                      	ldi r16, $80
000354 b90f                      	out SPDR, r16
000355 d021                      	rcall waitTransmit
000356 b94f                      	out SPDR, r20
000357 d01f                      	rcall waitTransmit
000358 d021                      	rcall endPacket
000359 9508                      	ret
                                 
                                 ; Write byte [r19] as data (no packet control)
                                 writeData:
00035a e000                      	ldi r16, 0
00035b b90f                      	out SPDR, r16
00035c d01a                      	rcall waitTransmit
00035d b93f                      	out SPDR, r19
00035e d018                      	rcall waitTransmit
00035f 9508                      	ret
                                 
                                 ; read a byte into [r19] (no packet control)
                                 readData:
000360 e400                      	ldi r16, $40
000361 b90f                      	out SPDR, r16
000362 d014                      	rcall waitTransmit
                                 	;sbi SPSR, SPIF
000363 e000                      	ldi r16, $00
000364 b90f                      	out SPDR, r16
000365 d011                      	rcall waitTransmit
000366 b13f                      	in r19, SPDR
000367 9508                      	ret
                                 
                                 
                                 ; Read register [r20] into [r19]
                                 readRegister:
000368 dfe9                      	rcall writeCommand
000369 d01b                      	rcall startPacket
00036a dff5                      	rcall readData
00036b d00e                      	rcall endPacket
00036c 9508                      	ret
                                 	
                                 readStatus:
00036d d017                      	rcall startPacket
00036e ec00                      	ldi r16, 0b11000000
00036f b90f                      	out SPDR, r16
000370 d006                      	rcall waitTransmit
000371 e000                      	ldi r16, $00
000372 b90f                      	out SPDR, r16
000373 d003                      	rcall waitTransmit
000374 b13f                      	in r19, SPDR
000375 d004                      	rcall endPacket
000376 9508                      	ret
                                 
                                 
                                 waitTransmit:
000377 9b77                      	sbis SPSR, SPIF
000378 cffe                      	rjmp waitTransmit
000379 9508                      	ret
                                 
                                 endPacket:
00037a e101                      	ldi r16, 0b00010001
00037b bb08                      	out PORTB, r16 ; End packet
00037c 0000
00037d 0000
00037e 0000
00037f 0000                      	nop nop nop nop
000380 0000
000381 0000
000382 0000
000383 0000                      	nop nop nop nop
000384 9508                      	ret
                                 
                                 startPacket:
000385 e100                      	ldi r16, 0b00010000
000386 bb08                      	out PORTB, r16 ; Start packet
000387 0000
000388 0000
000389 0000
00038a 0000                      	nop nop nop nop
00038b 0000
00038c 0000
00038d 0000
00038e 0000                      	nop nop nop nop
00038f 9508                      	ret
                                 
                                 ; Write char [r18] to screen
                                 charOut:
000390 d0e1                      	rcall initTextOut_
000391 e042                      	ldi r20, $02
000392 dfbf                      	rcall writeCommand
000393 dff1                      	rcall startPacket
000394 2f32                      	mov r19, r18
000395 dfc4                      	rcall writeData
000396 dfe3                      	rcall endPacket
000397 9508                      	ret
                                 
                                 stringOut:
000398 d0d9                      	rcall initTextOut_
000399 e042                      	ldi r20, $02
00039a dfb7                      	rcall writeCommand
00039b dfe9                      	rcall startPacket
00039c e000                      	ldi r16, 0
00039d b90f                      	out SPDR, r16
00039e dfd8                      	rcall waitTransmit
                                 stringLoop_:
00039f 3020                      	cpi r18, $00
0003a0 f029                      	breq stringEnd_
0003a1 9135                      	lpm r19, Z+
0003a2 b93f                      	out SPDR, r19
0003a3 dfd3                      	rcall waitTransmit
0003a4 952a                      	dec r18
0003a5 cff9                      	rjmp stringLoop_
                                 stringEnd_:
0003a6 dfd3                      	rcall endPacket
0003a7 9508                      	ret
                                 
                                 cCharOut:
0003a8 934f
0003a9 933f
0003aa 932f
0003ab e440
0003ac e830
0003ad df9f
0003ae 912f
0003af 913f
0003b0 914f                      	REGISTER $40, $80
0003b1 934f
0003b2 933f
0003b3 932f
0003b4 e441
0003b5 e030
0003b6 df96
0003b7 912f
0003b8 913f
0003b9 914f                      	REGISTER $41, $00
0003ba 934f
0003bb 933f
0003bc 932f
0003bd e640
0003be e030
0003bf df8d
0003c0 912f
0003c1 913f
0003c2 914f                      	REGISTER $60, 0
0003c3 934f
0003c4 933f
0003c5 932f
0003c6 e641
0003c7 e030
0003c8 df84
0003c9 912f
0003ca 913f
0003cb 914f                      	REGISTER $61, 0
0003cc 934f
0003cd 933f
0003ce 932f
0003cf e642
0003d0 e030
0003d1 df7b
0003d2 912f
0003d3 913f
0003d4 914f                      	REGISTER $62, 0
0003d5 934f
0003d6 933f
0003d7 932f
0003d8 e643
0003d9 e030
0003da df72
0003db 912f
0003dc 913f
0003dd 914f                      	REGISTER $63, 0
0003de 934f
0003df 933f
0003e0 932f
0003e1 e644
0003e2 e037
0003e3 df69
0003e4 912f
0003e5 913f
0003e6 914f                      	REGISTER $64, 7
0003e7 934f
0003e8 933f
0003e9 932f
0003ea e645
0003eb e030
0003ec df60
0003ed 912f
0003ee 913f
0003ef 914f                      	REGISTER $65, 0
0003f0 934f
0003f1 933f
0003f2 932f
0003f3 e241
0003f4 ea30
0003f5 df57
0003f6 912f
0003f7 913f
0003f8 914f                      	REGISTER $21, 0b10100000
0003f9 934f
0003fa 933f
0003fb 932f
0003fc e242
0003fd e03b
0003fe df4e
0003ff 912f
000400 913f
000401 914f                      	REGISTER $22, 0b00001011
000402 e042                      	ldi r20, $02
000403 df4e                      	rcall writeCommand
000404 df80                      	rcall startPacket
000405 2f32                      	mov r19, r18
000406 df53                      	rcall writeData
000407 df72                      	rcall endPacket
000408 9508                      	ret
                                 
                                 cStringOut:
000409 934f
00040a 933f
00040b 932f
00040c e440
00040d e830
00040e df3e
00040f 912f
000410 913f
000411 914f                      	REGISTER $40, $80
000412 934f
000413 933f
000414 932f
000415 e441
000416 e030
000417 df35
000418 912f
000419 913f
00041a 914f                      	REGISTER $41, $00
00041b 934f
00041c 933f
00041d 932f
00041e e640
00041f e030
000420 df2c
000421 912f
000422 913f
000423 914f                      	REGISTER $60, 0
000424 934f
000425 933f
000426 932f
000427 e641
000428 e030
000429 df23
00042a 912f
00042b 913f
00042c 914f                      	REGISTER $61, 0
00042d 934f
00042e 933f
00042f 932f
000430 e642
000431 e030
000432 df1a
000433 912f
000434 913f
000435 914f                      	REGISTER $62, 0
000436 934f
000437 933f
000438 932f
000439 e643
00043a e030
00043b df11
00043c 912f
00043d 913f
00043e 914f                      	REGISTER $63, 0
00043f 934f
000440 933f
000441 932f
000442 e644
000443 e037
000444 df08
000445 912f
000446 913f
000447 914f                      	REGISTER $64, 7
000448 934f
000449 933f
00044a 932f
00044b e645
00044c e030
00044d deff
00044e 912f
00044f 913f
000450 914f                      	REGISTER $65, 0
000451 934f
000452 933f
000453 932f
000454 e241
000455 ea30
000456 def6
000457 912f
000458 913f
000459 914f                      	REGISTER $21, 0b10100000
00045a 934f
00045b 933f
00045c 932f
00045d e242
00045e e03b
00045f deed
000460 912f
000461 913f
000462 914f                      	REGISTER $22, 0b00001011
                                 /*	ldi r20, $02
                                 	rcall writeCommand
                                 	rcall startPacket
                                 	rcall readData
                                 	rcall endPacket
                                 	sbr r19, 7
                                 	rcall writeCommand
                                 	rcall startPacket
                                 	rcall writeData
                                 	rcall endPacket*/
000463 e042                      	ldi r20, $02
000464 deed                      	rcall writeCommand
000465 df1f                      	rcall startPacket
000466 e030                      	ldi r19, 0
000467 b93f                      	out SPDR, r19
000468 df0e                      	rcall waitTransmit
                                 cStringLoop_:
000469 3020                      	cpi r18, $00
00046a f029                      	breq cStringEnd_
00046b 9135                      	lpm r19, Z+
00046c b93f                      	out SPDR, r19
00046d df09                      	rcall waitTransmit
00046e 952a                      	dec r18
00046f cff9                      	rjmp cStringLoop_
                                 cStringEnd_:
000470 df09                      	rcall endPacket
000471 9508                      	ret
                                 
                                 initTextOut_:
000472 e440                      	ldi r20, $40
000473 dede                      	rcall writeCommand
000474 df10                      	rcall startPacket
000475 deea                      	rcall readData
000476 df03                      	rcall endPacket
000477 deda                      	rcall writeCommand
000478 6830                      	ori r19, $80
000479 df0b                      	rcall startPacket
00047a dedf                      	rcall writeData
00047b defe                      	rcall endPacket
00047c 934f
00047d 933f
00047e 932f
00047f e241
000480 e030
000481 decb
000482 912f
000483 913f
000484 914f                      	REGISTER $21, $00
                                 /*	ldi r20, $21
                                 	rcall writeCommand
                                 	rcall startPacket
                                 	rcall readData
                                 	rcall endPacket
                                 	cbr r19, 7
                                 	cbr r19, 5
                                 	rcall writeCommand
                                 	rcall startPacket
                                 	rcall writeData
                                 	rcall endPacket*/
000485 934f
000486 933f
000487 932f
000488 e640
000489 e030
00048a dec2
00048b 912f
00048c 913f
00048d 914f                      	REGISTER $60, 0
00048e 934f
00048f 933f
000490 932f
000491 e641
000492 e030
000493 deb9
000494 912f
000495 913f
000496 914f                      	REGISTER $61, 0
000497 934f
000498 933f
000499 932f
00049a e642
00049b e030
00049c deb0
00049d 912f
00049e 913f
00049f 914f                      	REGISTER $62, 0
0004a0 934f
0004a1 933f
0004a2 932f
0004a3 e643
0004a4 e030
0004a5 dea7
0004a6 912f
0004a7 913f
0004a8 914f                      	REGISTER $63, 0
0004a9 934f
0004aa 933f
0004ab 932f
0004ac e644
0004ad e037
0004ae de9e
0004af 912f
0004b0 913f
0004b1 914f                      	REGISTER $64, 7
0004b2 934f
0004b3 933f
0004b4 932f
0004b5 e645
0004b6 e030
0004b7 de95
0004b8 912f
0004b9 913f
0004ba 914f                      	REGISTER $65, 0
0004bb 934f
0004bc 933f
0004bd 932f
0004be e242
0004bf e03b
0004c0 de8c
0004c1 912f
0004c2 913f
0004c3 914f                      	REGISTER $22, 0b00001011
0004c4 934f
0004c5 933f
0004c6 932f
0004c7 e441
0004c8 e030
0004c9 de83
0004ca 912f
0004cb 913f
0004cc 914f                      	REGISTER $41, 0
0004cd 934f
0004ce 933f
0004cf 932f
0004d0 e24e
0004d1 e030
0004d2 de7a
0004d3 912f
0004d4 913f
0004d5 914f                      	REGISTER $2E, 0
                                 	;cursor
                                 	;REGISTER $2A, $00
                                 	;REGISTER $2B, $00
                                 	;REGISTER $2C, $00
                                 	;REGISTER $2D, $00
0004d6 9508                      	ret
                                 
                                 
                                 addChar:
0004d7 933f                      	push r19
                                 /*	ldi r20, $40
                                 	rcall writeCommand
                                 	rcall startPacket
                                 	rcall readData
                                 	rcall endPacket
                                 	rcall writeCommand
                                 	cbr r19, 7
                                 	rcall startPacket
                                 	rcall writeData
                                 	rcall endPacket*/
0004d8 934f
0004d9 933f
0004da 932f
0004db e440
0004dc e030
0004dd de6f
0004de 912f
0004df 913f
0004e0 914f                      	REGISTER $40, 0
0004e1 934f
0004e2 933f
0004e3 932f
0004e4 e241
0004e5 e030
0004e6 de66
0004e7 912f
0004e8 913f
0004e9 914f                      	REGISTER $21, 0
0004ea 934f
0004eb 933f
0004ec 932f
0004ed e441
0004ee e034
0004ef de5d
0004f0 912f
0004f1 913f
0004f2 914f                      	REGISTER $41, 0b000000100
0004f3 e243                      	ldi r20, $23
0004f4 913f                      	pop r19
0004f5 de57                      	rcall writeRegister
0004f6 e042                      	ldi r20, $02
0004f7 de5a                      	rcall writeCommand
0004f8 e120                      	ldi r18, 16
0004f9 de8b                      	rcall startPacket
0004fa e000                      	ldi r16, 0
0004fb b90f                      	out SPDR, r16
0004fc de7a                      	rcall waitTransmit
0004fd dea1                      	rcall stringLoop_
0004fe 9508                      	ret
                                 
                                 .INCLUDE "variablesAndByteTables.asm"
                                 
0004ff 2020
000500 2020
000501 2020
000502 2020
000503 2020
000504 2020
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm(2): warning: .cseg .db misalignment - padding zero byte
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(203): '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm' included form here
000505 0020                      .db $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
                                 
                                 ro:
000506 2020
000507 2020
000508 2020
000509 2020
00050a 2020
00050b 2020
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm(5): warning: .cseg .db misalignment - padding zero byte
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(203): '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm' included form here
00050c 0020                      .db $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
                                 
                                 foe:
00050d 0504
00050e 0504
00050f 0504
000510 0504
000511 0504
000512 0504
000513 0504
000514 0504
000515 0504
000516 0504                      .db $04, $05, $04, $05, $04, $05, $04, $05, $04, $05, $04, $05, $04, $05, $04, $05, $04, $05, $04, $05
                                 
                                 blnkRow:
000517 2020
000518 2020
000519 2020
00051a 2020
00051b 2020
00051c 2020
00051d 2020
00051e 2020
00051f 2020
000520 2020
000521 2020
000522 2020
000523 2020
000524 2020
000525 2020
000526 2020
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm(11): warning: .cseg .db misalignment - padding zero byte
\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\mainNew.asm(203): '\\icnas4.cc.ic.ac.uk\cbl15\3rd year lab\Microprocessors\spaceInvaders\spaceInvaders\variablesAndByteTables.asm' included form here
000527 0020                      .db $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
                                 
                                 
                                 uDed:
000528 6f43
000529 676e
00052a 6172
00052b 7574
00052c 616c
00052d 6974
00052e 6e6f
00052f 2173
000530 5920
000531 756f
000532 6420
000533 6569
000534 2e64                      .db "Congratulations! You died."
                                 
                                 .def loLength = r18
                                 .def roLength = r19
                                 .def foeLength = r20
                                 .def playerPos = r21
                                 .def blnkRowl = r22
                                 .def compFlag = r23
                                 .def shift = r24


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega128" register use summary:
x  :   0 y  :   0 z  :   2 r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   3 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  54 r17:   6 r18: 212 r19: 266 r20: 257 
r21:   6 r22:   2 r23:  10 r24:   4 r25:   6 r26:  20 r27:  15 r28:   0 
r29:   0 r30:  15 r31:  15 
Registers used: 16 out of 35 (45.7%)

"ATmega128" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   2 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  12 brge  :   3 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 
brne  :   5 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :   0 cpc   :   0 
cpi   :  16 cpse  :   0 dec   :   5 elpm  :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   5 inc   :   5 
jmp   :   2 ld    :   0 ldd   :   0 ldi   : 227 lds   :   0 lpm   :   2 
lsl   :   0 lsr   :   0 mov   :  18 movw  :   0 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :  38 or    :   0 ori   :   1 out   :  31 
pop   : 276 push  : 276 rcall : 189 ret   :  37 reti  :  25 rjmp  :  12 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 
sbis  :   1 sbiw  :   5 sbr   :   0 sbrc  :   1 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 
sts   :   0 sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 27 out of 114 (23.7%)

"ATmega128" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a6a   2398    108   2506  131072   1.9%
[.dseg] 0x000100 0x000100      0      0      0    4096   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 3 warnings
